{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# manual installs"
      ],
      "metadata": {
        "id": "SgXpzsPJre2j"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install yfinance --upgrade --no-cache-dir"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "c8qaynaI0qCG",
        "outputId": "5778a91c-3f2b-4652-c173-1d63583268af"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: yfinance in /usr/local/lib/python3.11/dist-packages (0.2.61)\n",
            "Collecting yfinance\n",
            "  Downloading yfinance-0.2.62-py2.py3-none-any.whl.metadata (5.8 kB)\n",
            "Requirement already satisfied: pandas>=1.3.0 in /usr/local/lib/python3.11/dist-packages (from yfinance) (2.2.2)\n",
            "Requirement already satisfied: numpy>=1.16.5 in /usr/local/lib/python3.11/dist-packages (from yfinance) (2.0.2)\n",
            "Requirement already satisfied: requests>=2.31 in /usr/local/lib/python3.11/dist-packages (from yfinance) (2.32.3)\n",
            "Requirement already satisfied: multitasking>=0.0.7 in /usr/local/lib/python3.11/dist-packages (from yfinance) (0.0.11)\n",
            "Requirement already satisfied: platformdirs>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from yfinance) (4.3.8)\n",
            "Requirement already satisfied: pytz>=2022.5 in /usr/local/lib/python3.11/dist-packages (from yfinance) (2025.2)\n",
            "Requirement already satisfied: frozendict>=2.3.4 in /usr/local/lib/python3.11/dist-packages (from yfinance) (2.4.6)\n",
            "Requirement already satisfied: peewee>=3.16.2 in /usr/local/lib/python3.11/dist-packages (from yfinance) (3.18.1)\n",
            "Requirement already satisfied: beautifulsoup4>=4.11.1 in /usr/local/lib/python3.11/dist-packages (from yfinance) (4.13.4)\n",
            "Requirement already satisfied: curl_cffi>=0.7 in /usr/local/lib/python3.11/dist-packages (from yfinance) (0.11.1)\n",
            "Requirement already satisfied: protobuf>=3.19.0 in /usr/local/lib/python3.11/dist-packages (from yfinance) (5.29.5)\n",
            "Requirement already satisfied: websockets>=13.0 in /usr/local/lib/python3.11/dist-packages (from yfinance) (15.0.1)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4>=4.11.1->yfinance) (2.7)\n",
            "Requirement already satisfied: typing-extensions>=4.0.0 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4>=4.11.1->yfinance) (4.14.0)\n",
            "Requirement already satisfied: cffi>=1.12.0 in /usr/local/lib/python3.11/dist-packages (from curl_cffi>=0.7->yfinance) (1.17.1)\n",
            "Requirement already satisfied: certifi>=2024.2.2 in /usr/local/lib/python3.11/dist-packages (from curl_cffi>=0.7->yfinance) (2025.4.26)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.3.0->yfinance) (2.9.0.post0)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.3.0->yfinance) (2025.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31->yfinance) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31->yfinance) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31->yfinance) (2.4.0)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.11/dist-packages (from cffi>=1.12.0->curl_cffi>=0.7->yfinance) (2.22)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas>=1.3.0->yfinance) (1.17.0)\n",
            "Downloading yfinance-0.2.62-py2.py3-none-any.whl (118 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m118.4/118.4 kB\u001b[0m \u001b[31m9.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: yfinance\n",
            "  Attempting uninstall: yfinance\n",
            "    Found existing installation: yfinance 0.2.61\n",
            "    Uninstalling yfinance-0.2.61:\n",
            "      Successfully uninstalled yfinance-0.2.61\n",
            "Successfully installed yfinance-0.2.62\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install yahooquery"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "Uy1nH1PWY5WQ",
        "outputId": "fe8abe78-9e1a-4f6f-9200-335b79bea40b"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting yahooquery\n",
            "  Downloading yahooquery-2.4.1-py3-none-any.whl.metadata (4.8 kB)\n",
            "Requirement already satisfied: beautifulsoup4>=4.12.2 in /usr/local/lib/python3.11/dist-packages (from yahooquery) (4.13.4)\n",
            "Requirement already satisfied: curl-cffi>=0.10.0 in /usr/local/lib/python3.11/dist-packages (from yahooquery) (0.11.1)\n",
            "Requirement already satisfied: lxml>=4.9.3 in /usr/local/lib/python3.11/dist-packages (from yahooquery) (5.4.0)\n",
            "Requirement already satisfied: pandas>=2.2.0 in /usr/local/lib/python3.11/dist-packages (from yahooquery) (2.2.2)\n",
            "Collecting requests-futures>=1.0.1 (from yahooquery)\n",
            "  Downloading requests_futures-1.0.2-py2.py3-none-any.whl.metadata (12 kB)\n",
            "Requirement already satisfied: tqdm>=4.65.0 in /usr/local/lib/python3.11/dist-packages (from yahooquery) (4.67.1)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4>=4.12.2->yahooquery) (2.7)\n",
            "Requirement already satisfied: typing-extensions>=4.0.0 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4>=4.12.2->yahooquery) (4.14.0)\n",
            "Requirement already satisfied: cffi>=1.12.0 in /usr/local/lib/python3.11/dist-packages (from curl-cffi>=0.10.0->yahooquery) (1.17.1)\n",
            "Requirement already satisfied: certifi>=2024.2.2 in /usr/local/lib/python3.11/dist-packages (from curl-cffi>=0.10.0->yahooquery) (2025.4.26)\n",
            "Requirement already satisfied: numpy>=1.23.2 in /usr/local/lib/python3.11/dist-packages (from pandas>=2.2.0->yahooquery) (2.0.2)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas>=2.2.0->yahooquery) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas>=2.2.0->yahooquery) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=2.2.0->yahooquery) (2025.2)\n",
            "Requirement already satisfied: requests>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from requests-futures>=1.0.1->yahooquery) (2.32.3)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.11/dist-packages (from cffi>=1.12.0->curl-cffi>=0.10.0->yahooquery) (2.22)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas>=2.2.0->yahooquery) (1.17.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=1.2.0->requests-futures>=1.0.1->yahooquery) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests>=1.2.0->requests-futures>=1.0.1->yahooquery) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=1.2.0->requests-futures>=1.0.1->yahooquery) (2.4.0)\n",
            "Downloading yahooquery-2.4.1-py3-none-any.whl (50 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m50.7/50.7 kB\u001b[0m \u001b[31m2.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading requests_futures-1.0.2-py2.py3-none-any.whl (7.7 kB)\n",
            "Installing collected packages: requests-futures, yahooquery\n",
            "Successfully installed requests-futures-1.0.2 yahooquery-2.4.1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install curl_cffi"
      ],
      "metadata": {
        "collapsed": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9bNWEtynGMdA",
        "outputId": "8f0442be-1941-43fc-daee-8becf7ed1b1a"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: curl_cffi in /usr/local/lib/python3.11/dist-packages (0.11.1)\n",
            "Requirement already satisfied: cffi>=1.12.0 in /usr/local/lib/python3.11/dist-packages (from curl_cffi) (1.17.1)\n",
            "Requirement already satisfied: certifi>=2024.2.2 in /usr/local/lib/python3.11/dist-packages (from curl_cffi) (2025.4.26)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.11/dist-packages (from cffi>=1.12.0->curl_cffi) (2.22)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Git commands"
      ],
      "metadata": {
        "id": "gc7EtcGbsc1T"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!git init"
      ],
      "metadata": {
        "collapsed": true,
        "id": "c4wTf7gnyi1n",
        "outputId": "737bd0ca-66de-4abe-9c87-281fc3961656",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[33mhint: Using 'master' as the name for the initial branch. This default branch name\u001b[m\n",
            "\u001b[33mhint: is subject to change. To configure the initial branch name to use in all\u001b[m\n",
            "\u001b[33mhint: of your new repositories, which will suppress this warning, call:\u001b[m\n",
            "\u001b[33mhint: \u001b[m\n",
            "\u001b[33mhint: \tgit config --global init.defaultBranch <name>\u001b[m\n",
            "\u001b[33mhint: \u001b[m\n",
            "\u001b[33mhint: Names commonly chosen instead of 'master' are 'main', 'trunk' and\u001b[m\n",
            "\u001b[33mhint: 'development'. The just-created branch can be renamed via this command:\u001b[m\n",
            "\u001b[33mhint: \u001b[m\n",
            "\u001b[33mhint: \tgit branch -m <name>\u001b[m\n",
            "Initialized empty Git repository in /content/.git/\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!git remote add origin https://github.com/KaiSun19/OptionStrategyNotebook.git"
      ],
      "metadata": {
        "id": "gyzdaUK3AV6e"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!git config --global user.email \"yksun15@gmail.com\"\n",
        "!git config --global user.name \"KaiSun19\""
      ],
      "metadata": {
        "id": "pXYlOte8AyU1"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!git branch -M main"
      ],
      "metadata": {
        "id": "tQEPL1kjBAad"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!git add ."
      ],
      "metadata": {
        "id": "mXXe5-_NBHFt"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!git status"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ImC7Wsp3BKGd",
        "outputId": "66c94696-05ad-45ae-8a5b-abe1880df1f1",
        "collapsed": true
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "On branch main\n",
            "\n",
            "No commits yet\n",
            "\n",
            "Changes to be committed:\n",
            "  (use \"git rm --cached <file>...\" to unstage)\n",
            "\t\u001b[32mnew file:   .config/.last_opt_in_prompt.yaml\u001b[m\n",
            "\t\u001b[32mnew file:   .config/.last_survey_prompt.yaml\u001b[m\n",
            "\t\u001b[32mnew file:   .config/.last_update_check.json\u001b[m\n",
            "\t\u001b[32mnew file:   .config/active_config\u001b[m\n",
            "\t\u001b[32mnew file:   .config/config_sentinel\u001b[m\n",
            "\t\u001b[32mnew file:   .config/configurations/config_default\u001b[m\n",
            "\t\u001b[32mnew file:   .config/default_configs.db\u001b[m\n",
            "\t\u001b[32mnew file:   .config/gce\u001b[m\n",
            "\t\u001b[32mnew file:   .config/hidden_gcloud_config_universe_descriptor_data_cache_configs.db\u001b[m\n",
            "\t\u001b[32mnew file:   .config/logs/2025.06.05/13.37.29.893875.log\u001b[m\n",
            "\t\u001b[32mnew file:   .config/logs/2025.06.05/13.37.50.659801.log\u001b[m\n",
            "\t\u001b[32mnew file:   .config/logs/2025.06.05/13.37.59.873672.log\u001b[m\n",
            "\t\u001b[32mnew file:   .config/logs/2025.06.05/13.38.01.160966.log\u001b[m\n",
            "\t\u001b[32mnew file:   .config/logs/2025.06.05/13.38.10.544873.log\u001b[m\n",
            "\t\u001b[32mnew file:   .config/logs/2025.06.05/13.38.11.288440.log\u001b[m\n",
            "\t\u001b[32mnew file:   sample_data/README.md\u001b[m\n",
            "\t\u001b[32mnew file:   sample_data/anscombe.json\u001b[m\n",
            "\t\u001b[32mnew file:   sample_data/california_housing_test.csv\u001b[m\n",
            "\t\u001b[32mnew file:   sample_data/california_housing_train.csv\u001b[m\n",
            "\t\u001b[32mnew file:   sample_data/mnist_test.csv\u001b[m\n",
            "\t\u001b[32mnew file:   sample_data/mnist_train_small.csv\u001b[m\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!git commit -m \"initial commit from google colab\""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RLLxEAQ0ArmF",
        "outputId": "44482eef-02f5-4ddf-eab7-3bf561946875",
        "collapsed": true
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[main (root-commit) be87fff] initial commit from google colab\n",
            " 21 files changed, 51025 insertions(+)\n",
            " create mode 100644 .config/.last_opt_in_prompt.yaml\n",
            " create mode 100644 .config/.last_survey_prompt.yaml\n",
            " create mode 100644 .config/.last_update_check.json\n",
            " create mode 100644 .config/active_config\n",
            " create mode 100644 .config/config_sentinel\n",
            " create mode 100644 .config/configurations/config_default\n",
            " create mode 100644 .config/default_configs.db\n",
            " create mode 100644 .config/gce\n",
            " create mode 100644 .config/hidden_gcloud_config_universe_descriptor_data_cache_configs.db\n",
            " create mode 100644 .config/logs/2025.06.05/13.37.29.893875.log\n",
            " create mode 100644 .config/logs/2025.06.05/13.37.50.659801.log\n",
            " create mode 100644 .config/logs/2025.06.05/13.37.59.873672.log\n",
            " create mode 100644 .config/logs/2025.06.05/13.38.01.160966.log\n",
            " create mode 100644 .config/logs/2025.06.05/13.38.10.544873.log\n",
            " create mode 100644 .config/logs/2025.06.05/13.38.11.288440.log\n",
            " create mode 100755 sample_data/README.md\n",
            " create mode 100755 sample_data/anscombe.json\n",
            " create mode 100644 sample_data/california_housing_test.csv\n",
            " create mode 100644 sample_data/california_housing_train.csv\n",
            " create mode 100644 sample_data/mnist_test.csv\n",
            " create mode 100644 sample_data/mnist_train_small.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Imports and typings"
      ],
      "metadata": {
        "id": "-kC48IOmBM4E"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "25Dx9GP9z_3u"
      },
      "outputs": [],
      "source": [
        "import sys\n",
        "\n",
        "import datetime, time\n",
        "from datetime import timedelta, datetime\n",
        "import dateutil\n",
        "import requests\n",
        "from curl_cffi import requests as curl_requests\n",
        "import pandas as pd\n",
        "import os.path\n",
        "from os import path\n",
        "import yfinance as yf\n",
        "from yahooquery import Ticker\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.cm as cm\n",
        "import seaborn as sns\n",
        "\n",
        "from itertools import combinations\n",
        "\n",
        "import numpy as np\n",
        "from scipy.stats import norm\n",
        "from pandas_datareader import data as pdr\n",
        "import re\n",
        "import json\n",
        "import uuid\n",
        "import firebase_admin\n",
        "from firebase_admin import firestore, credentials\n",
        "import time\n",
        "\n",
        "from typing import TypedDict, List, Union , Sequence, Literal\n",
        "\n",
        "from math import exp, log,sqrt\n",
        "\n",
        "pd.set_option('display.max_colwidth', None)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class RawOptionsDataRow(TypedDict, total=False):\n",
        "    contractSymbol: str\n",
        "    strike: float  # Required\n",
        "    currency: str\n",
        "    lastPrice: float  # Required\n",
        "    change: float\n",
        "    percentChange: float\n",
        "    volume: int  # Required\n",
        "    openInterest: int\n",
        "    bid: float\n",
        "    ask: float\n",
        "    contractSize: str\n",
        "    lastTradeDate: str\n",
        "    impliedVolatility: float  # Required\n",
        "    inTheMoney: bool\n",
        "\n",
        "class RawOptionsData(TypedDict):\n",
        "  data: List[RawOptionsDataRow]\n",
        "  index: List[tuple[str, str, str]]\n",
        "\n",
        "class FirebaseOptionData(TypedDict):\n",
        "  volume: int\n",
        "  impliedVolatility: float\n",
        "  contractType: str\n",
        "  lastPrice: float\n",
        "  strike: float\n",
        "\n",
        "class FirebaseOptionDataDict(TypedDict):\n",
        "  key: str\n",
        "  val: FirebaseOptionData\n",
        "\n",
        "GenericArray = Sequence[Union[str, int, float]]\n",
        "StrategyName = Literal[\"credit_iron_condor\", \"debit_iron_condor\", \"credit_put_spread\", \"credit_call_spread\" , \"debit_put_spread\", \"debit_call_spread\"]\n",
        "\n",
        "class StrategyParams(TypedDict):\n",
        "  name: StrategyName\n",
        "  delta_limit : Union[float, List[float]]\n",
        "\n",
        "class IVStatsDict(TypedDict):\n",
        "    iv_atm_pearson_coeff: float\n",
        "    iv_puts_pearson_coeff: float\n",
        "    iv_calls_pearson_coeff: float\n",
        "    put_call_iv_ratio_pearson_coeff: float\n",
        "    iv_hv_ratio_pearson_coeff: float\n",
        "    iv_atm_mean: float\n",
        "    iv_puts_mean: float\n",
        "    iv_calls_mean: float\n",
        "    put_call_iv_ratio_mean: float\n",
        "    iv_hv_ratio_mean: float\n",
        "    iv_index_mean: float"
      ],
      "metadata": {
        "id": "LneRmpIGtMhg"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Utils code to get general info about a stock"
      ],
      "metadata": {
        "id": "iOmq0qlKBar9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "symbols_list = ['SPY', 'MSTR', 'AVGO', 'PLTR', 'AMD', 'TLT']\n",
        "required_columns = ['contractSymbol', 'strike', 'bid', 'ask', 'lastPrice', 'change', 'volume', 'impliedVolatility', 'delta']\n",
        "raw_option_data_indexes = ['symbol', 'expiration', 'optionType']\n",
        "example_strategies = [{'strategy_name': 'debit_iron_condor', 'expiration_date': '2025-06-06', 'max_return': 6453.0, 'max_risk': 847.0, 'rnr': 27.3172690763, 'legs': {'debit_put_spread': {'long_strike': 573.0, 'long_ask': 5.25, 'short_strike': 500.0, 'short_bid': 0.27}, 'debit_call_spread': {'long_strike': 595.0, 'long_ask': 3.5, 'short_strike': 665.0, 'short_bid': 0.01}}, 'status': 'open', 'id': 'SPY_debit_iron_condor_05-21-2025'}, {'strategy_name': 'debit_call_spread', 'expiration_date': '2025-06-06', 'max_return': 6651.0, 'max_risk': 349.0, 'rnr': 19.0573065903, 'legs': {'long_strike': 595.0, 'long_ask': 3.5, 'short_strike': 665.0, 'short_bid': 0.01}, 'status': 'open', 'id': 'SPY_debit_call_spread_05-21-2025'}, {'strategy_name': 'debit_put_spread', 'expiration_date': '2025-06-06', 'max_return': 1401.0, 'max_risk': 499.0, 'rnr': 2.8076152305, 'legs': {'long_strike': 582.0, 'long_ask': 8.15, 'short_strike': 563.0, 'short_bid': 3.16}, 'status': 'open', 'id': 'SPY_debit_put_spread_05-21-2025'}, {'strategy_name': 'credit_iron_condor', 'expiration_date': '2025-06-06', 'max_return': 288.0, 'max_risk': 312, 'rnr': 0.5531914894, 'legs': {'credit_put_spread': {'short_strike': 573.0, 'short_bid': 5.2, 'long_strike': 567.0, 'long_ask': 3.9}, 'credit_call_spread': {'short_strike': 595.0, 'short_bid': 3.45, 'long_strike': 601.0, 'long_ask': 1.87}}, 'status': 'open', 'id': 'SPY_credit_iron_condor_05-21-2025'}, {'strategy_name': 'credit_put_spread', 'expiration_date': '2025-06-06', 'max_return': 130.0, 'max_risk': 470.0, 'rnr': 0.2765957447, 'legs': {'short_strike': 573.0, 'short_bid': 5.2, 'long_strike': 567.0, 'long_ask': 3.9}, 'status': 'open', 'id': 'SPY_credit_put_spread_05-21-2025'}]"
      ],
      "metadata": {
        "id": "FjVVxCjO_ll_"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "valid_historical_dates = ['17-03-2025', '19-03-2025', '25-03-2025', '26-03-2025', '27-03-2025', '28-03-2025', '03-04-2025', '04-04-2025', '08-04-2025', '09-04-2025', '10-04-2025', '14-04-2025', '16-04-2025', '21-04-2025', '24-04-2025', '28-04-2025', '29-04-2025', '30-04-2025', '08-05-2025', '09-05-2025', '12-05-2025', '16-05-2025', '19-05-2025', '20-05-2025', '21-05-2025', '22-05-2025', '23-05-2025']\n",
        "# historical_iv_stats_to_23_5_25 = [{'date': '17-03-2025', 'stats': {'iv_atm': np.float64(0.18252380952380956), 'iv_average': np.float64(0.2634761904761905), 'iv_weighted': np.float64(0.19395238095238096), 'iv_puts': np.float64(0.19657142857142856), 'iv_calls': np.float64(0.16866666666666663), 'put_call_iv_ratio': np.float64(1.1909047619047617), 'hv': np.float64(0.18433333333333335), 'iv_hv_ratio': np.float64(0.9511764705882354)}}, {'date': '19-03-2025', 'stats': {'iv_atm': np.float64(0.18505263157894736), 'iv_average': np.float64(0.31363157894736843), 'iv_weighted': np.float64(0.20278947368421055), 'iv_puts': np.float64(0.17742105263157895), 'iv_calls': np.float64(0.1928421052631579), 'put_call_iv_ratio': np.float64(0.9222105263157896), 'hv': np.float64(0.1747222222222222), 'iv_hv_ratio': np.float64(0.9941176470588234)}}, {'date': '25-03-2025', 'stats': {'iv_atm': np.float64(0.152), 'iv_average': np.float64(0.2645789473684211), 'iv_weighted': np.float64(0.16999999999999998), 'iv_puts': np.float64(0.14242105263157898), 'iv_calls': np.float64(0.16163157894736843), 'put_call_iv_ratio': np.float64(0.8927368421052632), 'hv': np.float64(0.1693125), 'iv_hv_ratio': np.float64(0.9333125)}}, {'date': '26-03-2025', 'stats': {'iv_atm': np.float64(0.16716666666666666), 'iv_average': np.float64(0.27844444444444444), 'iv_weighted': np.float64(0.18455555555555556), 'iv_puts': np.float64(0.15405555555555553), 'iv_calls': np.float64(0.18005555555555552), 'put_call_iv_ratio': np.float64(0.8602222222222223), 'hv': np.float64(0.15088235294117647), 'iv_hv_ratio': np.float64(1.0816249999999998)}}, {'date': '27-03-2025', 'stats': {'iv_atm': np.float64(0.16970588235294118), 'iv_average': np.float64(0.2542941176470588), 'iv_weighted': np.float64(0.17976470588235294), 'iv_puts': np.float64(0.1688235294117647), 'iv_calls': np.float64(0.17058823529411765), 'put_call_iv_ratio': np.float64(1.0069411764705882), 'hv': np.float64(0.16849999999999998), 'iv_hv_ratio': np.float64(1.0400625000000001)}}, {'date': '28-03-2025', 'stats': {'iv_atm': np.float64(0.196), 'iv_average': np.float64(0.2620625), 'iv_weighted': np.float64(0.20225), 'iv_puts': np.float64(0.17099999999999999), 'iv_calls': np.float64(0.2210625), 'put_call_iv_ratio': np.float64(0.7721875), 'hv': np.float64(0.15000000000000002), 'iv_hv_ratio': np.float64(1.4388125)}}, {'date': '03-04-2025', 'stats': {'iv_atm': np.float64(0.15841176470588234), 'iv_average': np.float64(0.149), 'iv_weighted': np.float64(0.13735294117647062), 'iv_puts': np.float64(0.1521764705882353), 'iv_calls': np.float64(0.1646470588235294), 'put_call_iv_ratio': np.float64(0.3578), 'hv': np.float64(0.14681249999999998), 'iv_hv_ratio': np.float64(1.9408750000000001)}}, {'date': '04-04-2025', 'stats': {'iv_atm': np.float64(0.145375), 'iv_average': np.float64(0.1353125), 'iv_weighted': np.float64(0.11075), 'iv_puts': np.float64(0.284875), 'iv_calls': np.float64(0.005875), 'put_call_iv_ratio': np.float64(10.0835), 'hv': np.float64(0.2811875), 'iv_hv_ratio': np.float64(0.5050625000000001)}}, {'date': '08-04-2025', 'stats': {'iv_atm': np.float64(0.2748947368421053), 'iv_average': np.float64(0.21194736842105263), 'iv_weighted': np.float64(0.2323157894736842), 'iv_puts': np.float64(0.32584210526315793), 'iv_calls': np.float64(0.22410526315789472), 'put_call_iv_ratio': np.float64(0.7505000000000001), 'hv': np.float64(0.308875), 'iv_hv_ratio': np.float64(0.8086875)}}, {'date': '09-04-2025', 'stats': {'iv_atm': np.float64(0.1762222222222222), 'iv_average': np.float64(0.18772222222222223), 'iv_weighted': np.float64(0.1445), 'iv_puts': np.float64(0.20005555555555554), 'iv_calls': np.float64(0.1523888888888889), 'put_call_iv_ratio': np.float64(1.9982777777777783), 'hv': np.float64(0.26182352941176473), 'iv_hv_ratio': np.float64(0.3994375)}}, {'date': '10-04-2025', 'stats': {'iv_atm': np.float64(0.16170588235294117), 'iv_average': np.float64(0.1388235294117647), 'iv_weighted': np.float64(0.10970588235294118), 'iv_puts': np.float64(0.18323529411764708), 'iv_calls': np.float64(0.13999999999999999), 'put_call_iv_ratio': np.float64(0.6260000000000001), 'hv': np.float64(0.55), 'iv_hv_ratio': np.float64(0.2218125)}}, {'date': '14-04-2025', 'stats': {'iv_atm': np.float64(0.18163157894736837), 'iv_average': np.float64(0.18878947368421053), 'iv_weighted': np.float64(0.11463157894736842), 'iv_puts': np.float64(0.13794736842105262), 'iv_calls': np.float64(0.2254210526315789), 'put_call_iv_ratio': np.float64(0.4945833333333332), 'hv': np.float64(0.5805625), 'iv_hv_ratio': np.float64(0.288875)}}, {'date': '16-04-2025', 'stats': {'iv_atm': np.float64(0.135), 'iv_average': np.float64(0.24641176470588236), 'iv_weighted': np.float64(0.1690588235294118), 'iv_puts': np.float64(0.13929411764705882), 'iv_calls': np.float64(0.13064705882352942), 'put_call_iv_ratio': np.float64(0.541), 'hv': np.float64(0.44243750000000004), 'iv_hv_ratio': np.float64(0.39856250000000004)}}, {'date': '21-04-2025', 'stats': {'iv_atm': np.float64(0.12352631578947368), 'iv_average': np.float64(0.20626315789473681), 'iv_weighted': np.float64(0.1446842105263158), 'iv_puts': np.float64(0.09305263157894739), 'iv_calls': np.float64(0.154), 'put_call_iv_ratio': np.float64(0.08225000000000002), 'hv': np.float64(0.33913333333333334), 'iv_hv_ratio': np.float64(0.34846666666666665)}}, {'date': '24-04-2025', 'stats': {'iv_atm': np.float64(0.1255), 'iv_average': np.float64(0.17675000000000002), 'iv_weighted': np.float64(0.13275), 'iv_puts': np.float64(0.1033125), 'iv_calls': np.float64(0.14775), 'put_call_iv_ratio': np.float64(4.648624999999999), 'hv': np.float64(0.32760000000000006), 'iv_hv_ratio': np.float64(0.5304)}}, {'date': '28-04-2025', 'stats': {'iv_atm': np.float64(0.21836842105263157), 'iv_average': np.float64(0.37236842105263157), 'iv_weighted': np.float64(0.23868421052631575), 'iv_puts': np.float64(0.20942105263157895), 'iv_calls': np.float64(0.22731578947368422), 'put_call_iv_ratio': np.float64(0.9246315789473685), 'hv': np.float64(0.2916875), 'iv_hv_ratio': np.float64(0.9718666666666665)}}, {'date': '29-04-2025', 'stats': {'iv_atm': np.float64(0.21133333333333335), 'iv_average': np.float64(0.3791666666666667), 'iv_weighted': np.float64(0.23600000000000002), 'iv_puts': np.float64(0.19261111111111112), 'iv_calls': np.float64(0.23005555555555557), 'put_call_iv_ratio': np.float64(0.8375555555555556), 'hv': np.float64(0.3082666666666667), 'iv_hv_ratio': np.float64(0.8782666666666668)}}, {'date': '30-04-2025', 'stats': {'iv_atm': np.float64(0.21400000000000002), 'iv_average': np.float64(0.3729411764705882), 'iv_weighted': np.float64(0.23341176470588235), 'iv_puts': np.float64(0.1872941176470588), 'iv_calls': np.float64(0.24111764705882355), 'put_call_iv_ratio': np.float64(0.7778823529411765), 'hv': np.float64(0.2708125), 'iv_hv_ratio': np.float64(1.3032666666666666)}}, {'date': '08-05-2025', 'stats': {'iv_atm': np.float64(0.19225), 'iv_average': np.float64(0.3456875), 'iv_weighted': np.float64(0.202875), 'iv_puts': np.float64(0.1838125), 'iv_calls': np.float64(0.20075), 'put_call_iv_ratio': np.float64(0.9205000000000001), 'hv': np.float64(0.25506666666666666), 'iv_hv_ratio': np.float64(1.0359999999999998)}}, {'date': '09-05-2025', 'stats': {'iv_atm': np.float64(0.1904), 'iv_average': np.float64(0.30959999999999993), 'iv_weighted': np.float64(0.20433333333333334), 'iv_puts': np.float64(0.18713333333333335), 'iv_calls': np.float64(0.19380000000000003), 'put_call_iv_ratio': np.float64(0.9752000000000003), 'hv': np.float64(0.23426666666666662), 'iv_hv_ratio': np.float64(1.4802)}}, {'date': '12-05-2025', 'stats': {}}, {'date': '19-05-2025', 'stats': {'iv_atm': np.float64(0.14966666666666667), 'iv_average': np.float64(0.2951111111111111), 'iv_weighted': np.float64(0.16477777777777777), 'iv_puts': np.float64(0.14905555555555555), 'iv_calls': np.float64(0.15049999999999997), 'put_call_iv_ratio': np.float64(1.0177222222222222), 'hv': np.float64(0.21613333333333337), 'iv_hv_ratio': np.float64(1.1347857142857143)}}, {'date': '20-05-2025', 'stats': {'iv_atm': np.float64(0.1494705882352941), 'iv_average': np.float64(0.31247058823529406), 'iv_weighted': np.float64(0.17064705882352943), 'iv_puts': np.float64(0.1341764705882353), 'iv_calls': np.float64(0.1645294117647059), 'put_call_iv_ratio': np.float64(0.8170588235294118), 'hv': np.float64(0.19857142857142857), 'iv_hv_ratio': np.float64(1.5340714285714285)}}, {'date': '21-05-2025', 'stats': {'iv_atm': np.float64(0.173625), 'iv_average': np.float64(0.3163125), 'iv_weighted': np.float64(0.190125), 'iv_puts': np.float64(0.14756249999999999), 'iv_calls': np.float64(0.19968750000000002), 'put_call_iv_ratio': np.float64(0.7409375), 'hv': np.float64(0.18653333333333333), 'iv_hv_ratio': np.float64(1.3700714285714286)}}, {'date': '22-05-2025', 'stats': {'iv_atm': np.float64(0.1707333333333333), 'iv_average': np.float64(0.29766666666666663), 'iv_weighted': np.float64(0.18493333333333334), 'iv_puts': np.float64(0.16606666666666664), 'iv_calls': np.float64(0.17533333333333337), 'put_call_iv_ratio': np.float64(0.957), 'hv': np.float64(0.2245714285714286), 'iv_hv_ratio': np.float64(0.8882142857142857)}}, {'date': '23-05-2025', 'stats': {'iv_atm': np.float64(0.16366666666666663), 'iv_average': np.float64(0.25772222222222224), 'iv_weighted': np.float64(0.1761111111111111), 'iv_puts': np.float64(0.15550000000000003), 'iv_calls': np.float64(0.17194444444444446), 'put_call_iv_ratio': np.float64(0.9133529411764707), 'hv': np.float64(0.20699999999999996), 'iv_hv_ratio': np.float64(0.9120555555555554)}}]\n",
        "all_tickers = ['NVDA', 'SOXL', 'TSLL', 'SQQQ', 'QBTS', 'SOXS', 'RGTI', 'TQQQ', 'PLUG', 'SPXS', 'OPEN', 'BBAI', 'OKLO', 'TSLZ', 'QUBT', 'LCID', 'TSLA', 'F', 'MSTU', 'AAPL', 'NVTS', 'SPY', 'WOLF', 'INTC', 'UEC', 'PLTR', 'IBIT', 'MSTZ', 'QQQ', 'IONQ', 'X', 'RUN', 'SMR', 'TLT', 'MARA', 'AAL', 'CLF', 'SOFI', 'WULF', 'SMCI', 'AGNC', 'PFE', 'GOOGL', 'BAC', 'EWZ', 'XLF', 'AMZN', 'UUUU', 'T', 'QSI', 'CRWV', 'AMD', 'GME', 'TSLQ', 'HYG', 'IWM', 'HOOD', 'FXI', 'AMDL', 'HBAN', 'CLSK', 'NVDX', 'UAA', 'GOOG', 'APLD', 'UVXY', 'GDX', 'HIMS', 'RIOT', 'TZA', 'AES', 'EEM', 'WBD', 'RIVN', 'NVDL', 'LQD', 'SOUN', 'MSTR', 'FAZ', 'PTON', 'CPRT', 'ACHR', 'SDS', 'DECK', 'HIVE', 'MSTY', 'SNAP', 'UBER', 'COMM', 'MRVL', 'CSX', 'NEE', 'BTBT', 'EFA', 'MSFT', 'UNH', 'RXRX', 'MU', 'SPXU', 'UVIX', 'RWM', 'SCHD', 'CCL', 'CDE', 'CIFR', 'JBLU', 'CSCO', 'AVGO', 'FCX', 'SLV', 'PCG', 'BIL', 'AMC', 'TNA', 'MVST', 'AUR', 'NKE', 'RKLB', 'CMCSA', 'PTEN', 'WMT', 'SCHX', 'HTZ', 'GLD', 'TSLS', 'GAP', 'KO', 'HL', 'KULR', 'LYFT', 'KMI', 'MSTX', 'ETHA', 'KRE', 'VEA', 'VZ', 'CHPT', 'COTY', 'BULL', 'BITX', 'MQ', 'XOM', 'SNOW', 'GERN', 'VFC', 'XLE', 'FUBO', 'TMF', 'QXO', 'SVIX', 'KWEB', 'RSP', 'MRK', 'XLU', 'IEFA', 'XLP', 'SBIT', 'SCHG', 'SLB', 'BITO', 'TEM', 'KHC', 'LUMN', 'NEM', 'KVUE', 'ENPH', 'MCHP', 'KEY', 'VTRS', 'IEF', 'ON', 'NWL', 'C', 'WBA', 'EXC', 'XYZ', 'U', 'SOXX', 'KOS', 'CMG', 'IEMG', 'HPE', 'PATH', 'WFC', 'COIN', 'QS', 'XLV', 'LUV', 'QCOM', 'CRM', 'EOSE', 'TJX', 'MPW', 'KDP', 'CPNG', 'ABR', 'PINS', 'META', 'BMY', 'FI', 'EWJ', 'LRCX', 'XLI', 'MRNA', 'CVS', 'HAL', 'VXUS', 'PEP', 'DIS', 'LABD', 'IOVA', 'DAL', 'KSS', 'ET', 'HPQ', 'QID', 'PYPL', 'IJH', 'JOBY', 'ARKK', 'IAU', 'CLOV', 'OSCR', 'CORZ', 'NVD', 'ANET', 'TXN', 'NCLH', 'VWO', 'TFC', 'SKX', 'TGT', 'PACB', 'ESPR', 'SH', 'VST', 'HUT', 'INDA', 'DOW', 'SBUX', 'DVN', 'CVX', 'M', 'ASTS', 'MUB', 'HST', 'APA', 'EQT', 'COP', 'CAG', 'WMB', 'AVTR', 'MDLZ', 'RDDT', 'JNJ', 'JPM', 'VXX', 'NLY', 'SMH', 'ORCL', 'SPLG', 'DKNG', 'OXY', 'VOO', 'UNG', 'PR', 'IVV', 'CHWY', 'SERV', 'IBRX', 'WU', 'QYLD', 'VG', 'PM', 'NFE', 'XBI', 'GILD', 'COMP', 'AEO', 'GDXJ', 'XLK', 'PSQ', 'D', 'KOLD', 'RKT', 'FFAI', 'SWTX', 'JEPQ', 'COF', 'USB', 'UPRO', 'WDC', 'AMAT', 'GT', 'RF', 'NVAX', 'FLG', 'FL', 'OGN', 'GM', 'V', 'PG', 'APP', 'BA', 'SPXL', 'AGG', 'VICI', 'BSX', 'CONY', 'SCHW', 'KR', 'TSLT', 'EVGO', 'SGOL', 'JEPI', 'MO', 'PANW', 'TTD', 'XRT', 'PSEC', 'UAL', 'TOST', 'ELAN', 'NOVA', 'BKR', 'SPTL', 'RBLX', 'BKLN', 'ASHR', 'HBI', 'APH', 'LVS', 'CRWD', 'CTRA', 'EMB', 'IYR', 'CRH', 'AA', 'DASH', 'ABNB', 'USO', 'BND', 'BBWI', 'GE', 'TDOC', 'CELH', 'CZR', 'ABBV', 'PL', 'O', 'AI', 'VGK', 'DJT', 'VRT', 'IGV', 'LUNR', 'IPG', 'DELL', 'XLC', 'GIS', 'FTNT', 'HUMA', 'XLY', 'EW', 'XLB', 'XLRE', 'BBY', 'EBAY', 'IJR', 'MNST', 'CFLT', 'CFG', 'EWY', 'RDFN', 'UWMC', 'AGL', 'TSLY', 'UPS', 'ETHE', 'ALAB', 'OVV', 'BRK-B', 'SO', 'PLD', 'KKR', 'ETHT', 'CC', 'MGM', 'ELF', 'YINN', 'MP', 'ENVX', 'ULTY', 'WEN', 'W', 'GLXY', 'IP', 'LLY', 'CVNA', 'NNE', 'LTBR', 'INFA', 'ROST', 'URA', 'XRX', 'ASPI', 'VLY', 'ALIT', 'AFRM', 'CL', 'EVLV', 'CONL', 'FHN', 'ABT', 'STX', 'CPB', 'AAPU', 'SPCE', 'SABR', 'RTX', 'PRMB', 'VSTM', 'CNC', 'PARA', 'ADI', 'UPST', 'GLL', 'GEN', 'SCHB', 'EWT', 'RCAT', 'NVDY', 'OWL', 'SHLS', 'PENN', 'BFLY', 'FAST', 'FBTC', 'SMCX', 'TSCO', 'BTU', 'BCRX', 'GLW', 'GEV', 'FSLR', 'JDST', 'ETHU', 'QQQM', 'MS', 'TSDD', 'BEN', 'SG', 'CLNE', 'VGLT', 'SLS', 'JNK', 'ETSY', 'CNP', 'SSO', 'PRCH', 'MOS', 'CHGG', 'AR', 'BOIL', 'XOP', 'DDOG', 'VTI', 'ALLY', 'WOOF', 'DHR', 'GTM', 'ACWI', 'HRL', 'PFF', 'EZU', 'TLH', 'INVH', 'ARDX', 'RCKT', 'SANA', 'OKTA', 'ANF', 'FTI', 'MVIS', 'LABU', 'JETS', 'S', 'WDAY', 'AAP', 'BAH', 'SHY', 'FLR', 'INTU', 'EWG', 'LQDA', 'CARR', 'LEU', 'FE', 'IVZ', 'AMPX', 'TMUS', 'TWO', 'ICLN', 'NUE', 'REXR', 'QLD', 'YANG', 'TROX', 'AIG', 'SRE', 'DUST', 'RITM', 'KMX', 'MAGS', 'DDD', 'FITB', 'BK', 'LOW', 'MET', 'DIA', 'EXEL', 'SOC', 'PCT', 'CAVA', 'NTAP', 'WY', 'UNP', 'PSTG', 'DNUT', 'AXL', 'EPD', 'GBTC', 'IBM', 'ALB', 'DUK', 'SRTY', 'HD', 'SYY', 'GGLL', 'ZETA', 'CTVA', 'HON', 'TSLR', 'SILJ', 'MCHI', 'BITU', 'YMAX', 'MSOS', 'COHR', 'NFLX', 'INOD', 'TSSI', 'SGMO', 'EWH', 'ALT', 'ULCC', 'EL', 'CHD', 'ARCC', 'VKTX', 'AMGN', 'RPRX', 'SMMT', 'LVWR', 'BOX', 'FYBR', 'OUST', 'DHI', 'OKE', 'OMC', 'APPS', 'DG', 'GTLB', 'VLO', 'ACI', 'CEG', 'PPL', 'BE', 'ARRY', 'EMR', 'URBN', 'GOGO', 'ZM', 'VSAT', 'TPR', 'SNDX', 'SWKS', 'NDAQ', 'BALL', 'IR', 'XME', 'DBRG', 'FLNC', 'MTCH', 'ADSK', 'STLD', 'FCEL', 'XEL', 'PBI', 'HYLN', 'AAAU', 'HUN', 'NCNO', 'CRBG', 'FOXA', 'ENTG', 'FRSH', 'MAT', 'DBX', 'FOLD', 'SVXY', 'FLEX', 'ZTS', 'MCD', 'PBF', 'TSN', 'VTV', 'FIP', 'DXCM', 'BWXT', 'BITI', 'BX', 'PEG', 'LBRT', 'CNK', 'PSQH', 'PDYN', 'KTOS', 'BROS', 'TIP', 'RBRK', 'VUZI', 'TER', 'K', 'IEI', 'ETR', 'MYGN', 'AEVA', 'CNM', 'AGQ', 'IWD', 'NUGT', 'SRPT', 'PGR', 'AAOI', 'SMTC', 'EIX', 'ROBN', 'APO', 'SSRM', 'HWM', 'LHX', 'VNQ', 'COR', 'HOLX', 'VSCO', 'TEMT', 'GPN', 'ARVN', 'INDI', 'XHB', 'UCO', 'NET', 'NTNX', 'AOS', 'VCLT', 'ROKU', 'SCO', 'MBB', 'BGS', 'ILF', 'FMC', 'SATS', 'ZS', 'NTLA', 'ESTC', 'COO', 'WYNN', 'IOT', 'REGN', 'AMTM', 'ASST', 'FIS']"
      ],
      "metadata": {
        "id": "0ZtbgXF2scLZ"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#general methods\n",
        "def loading_stat(data, data_list: Union[pd.Series, GenericArray]):\n",
        "  print(str(data) + ' ' +  str(round((data_list.index(data)/len(data_list) * 100),2)) + ' ' + '% done' )\n",
        "def get_vol(symbol, period = '41d'):\n",
        "  #gets volatility of past daily returns\n",
        "  raw_price = pdr.get_data_yahoo(symbol, period = period).Close\n",
        "  daily_returns = raw_price.pct_change()\n",
        "  return daily_returns.std()\n",
        "def get_future_date(days_from_today):\n",
        "  #gets future date from today in format YYYY-mm-dd\n",
        "  today = datetime.today()\n",
        "  future_date = today + timedelta(days=days_from_today)\n",
        "  return future_date.strftime(\"%Y-%m-%d\")\n",
        "def get_current_price(symbol, period='1d'):\n",
        "  #gets current price of a stock\n",
        "  try:\n",
        "    return yf.download(symbol, period=period)['Close'].iloc[0][symbol.upper()]\n",
        "  except Exception as e:\n",
        "    print(f\"Error retrieving price for {symbol}: {e}\")\n",
        "    return None\n",
        "def get_historical_price(symbol, past_date):\n",
        "  data = yf.download(symbol, start=past_date)\n",
        "  return data['Close'].iloc[0]\n",
        "def generate_uuid():\n",
        "  return str(uuid.uuid4())\n",
        "\n",
        "def smooth_array(arr: GenericArray):\n",
        "  if isinstance(arr, pd.Series):\n",
        "    arr = arr.to_numpy()\n",
        "\n",
        "  rolling_avg = np.convolve(arr, np.ones(3), 'valid') / 3\n",
        "  diff = arr[1:-1] - rolling_avg\n",
        "  q1, q3 = np.percentile(diff, [25, 75])\n",
        "  iqr = q3 - q1\n",
        "  threshold = 1.5 * iqr\n",
        "  outlier_indices = np.where(np.abs(diff) > threshold)[0] + 1\n",
        "\n",
        "  for i in outlier_indices:\n",
        "    arr[i] = (arr[i - 1] + arr[i + 1]) / 2\n",
        "\n",
        "  return arr\n",
        "\n",
        "def get_df_means(df):\n",
        "  \"\"\"\n",
        "  Calculates the mean of specified columns in a DataFrame,\n",
        "  dropping NaN and infinity values.\n",
        "  \"\"\"\n",
        "\n",
        "  means = {}\n",
        "  for col in df.columns:\n",
        "      clean_data = df[col].replace([np.inf, -np.inf], np.nan).dropna()\n",
        "      if not clean_data.empty:\n",
        "        means[col] = clean_data.mean()\n",
        "      else:\n",
        "        means[col] = np.nan\n",
        "  return means"
      ],
      "metadata": {
        "id": "tR-gcd2fXb1k",
        "collapsed": true
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#methods for analysing options data\n",
        "def get_raw_options_data(symbol) -> RawOptionsData:\n",
        "  session = curl_requests.Session(impersonate=\"chrome\")\n",
        "  return Ticker(symbol, session=session).option_chain\n",
        "\n",
        "def get_expiration_dates(raw_options_df, date_range: List[str], inRange= False):\n",
        "  #gets expiration dates in yyy-mm-dd format within a start and end date\n",
        "  dates = [x.strftime('%Y-%m-%d') for x in raw_options_df.index.get_level_values('expiration').unique()]\n",
        "  if inRange:\n",
        "    start_date = datetime.strptime(date_range[0], '%Y-%m-%d').date()\n",
        "    end_date = datetime.strptime(date_range[1], '%Y-%m-%d').date()\n",
        "\n",
        "    dates = [date for date in dates if start_date <= datetime.strptime(date, '%Y-%m-%d').date() <= end_date]\n",
        "  return dates\n",
        "\n",
        "def get_all_trading_dates_in_range(start_date, end_date, returnFormat = '%d-%m-%Y', includeEndDate = False ):\n",
        "  start_date_formatted = datetime.strptime(start_date, '%d-%m-%Y').strftime('%Y-%m-%d')\n",
        "  end_date_formatted = datetime.strptime(end_date, '%d-%m-%Y').strftime('%Y-%m-%d')\n",
        "\n",
        "  data = yf.download(\"^GSPC\", start=start_date_formatted, end=end_date_formatted)\n",
        "  trading_dates = data.index.strftime(returnFormat).tolist()\n",
        "  if includeEndDate == True:\n",
        "    trading_dates.append(end_date)\n",
        "  return trading_dates\n",
        "\n",
        "def get_forward_price(spot_price, expiry_date, start_date = datetime.today()):\n",
        "  time_to_expiry = get_days_till_expiry(expiry_date) / 365\n",
        "  rfe = risk_free_rate()\n",
        "  return spot_price * np.exp(rfe * time_to_expiry)\n",
        "\n",
        "def convert_datestring(date, start_format, end_format):\n",
        "  day_placeholder = 'dd'\n",
        "  month_placeholder = 'mm'\n",
        "  year_placeholder = 'yyyy'\n",
        "\n",
        "  try:\n",
        "    day_start_index = start_format.find(day_placeholder)\n",
        "    month_start_index = start_format.find(month_placeholder)\n",
        "    year_start_index = start_format.find(year_placeholder)\n",
        "\n",
        "    day_str = date[day_start_index : day_start_index + len(day_placeholder)]\n",
        "    month_str = date[month_start_index : month_start_index + len(month_placeholder)]\n",
        "    year_str = date[year_start_index : year_start_index + len(year_placeholder)]\n",
        "\n",
        "    converted_date_string = end_format.replace(day_placeholder, day_str).replace(month_placeholder, month_str).replace(year_placeholder, year_str)\n",
        "\n",
        "    return converted_date_string\n",
        "\n",
        "  except Exception as e:\n",
        "    print(f\"Error converting date string: {e}\")\n",
        "    return None\n",
        "\n",
        "def get_days_till_expiry(expiration_date, start_date = datetime.today().strftime(\"%Y-%m-%d\")):\n",
        "  expiration_date_dt = datetime.strptime(convert_datestring(expiration_date, 'yyyy-mm-dd', 'dd-mm-yyyy'), '%d-%m-%Y')\n",
        "  start_date_dt = datetime.strptime(convert_datestring(start_date,'dd-mm-yyyy', 'dd-mm-yyyy'), '%d-%m-%Y')\n",
        "  return abs((expiration_date_dt - start_date_dt).days)\n",
        "\n",
        "def risk_free_rate(date = datetime.today().strftime('%d-%m-%Y')):\n",
        "  \"\"\"\n",
        "  Returns the interest rate of a US Treasury 1-year bond using yfinance.\n",
        "  \"\"\"\n",
        "  try:\n",
        "    if date != datetime.today().strftime('%d-%m-%Y'):\n",
        "      start_date_str = datetime.strptime(date, '%d-%m-%Y').strftime('%Y-%m-%d')\n",
        "      end_date_str = (datetime.strptime(start_date_str, '%Y-%m-%d') + timedelta(days=1)).strftime('%Y-%m-%d')\n",
        "\n",
        "      data = yf.download('^IRX', start=start_date_str, end=end_date_str)\n",
        "\n",
        "    else:\n",
        "      data = yf.download('^IRX', period = '1d')\n",
        "\n",
        "    if not data.empty:\n",
        "      interest_rate = data['Close'].iloc[-1]/100\n",
        "      return interest_rate['^IRX']\n",
        "\n",
        "    else:\n",
        "      print(\"Could not retrieve Treasury bond data. Using default\")\n",
        "      return 0.041\n",
        "  except Exception as e:\n",
        "    print(f\"An error occurred: {e}\")\n",
        "    return None\n",
        "\n",
        "def get_theta(S, K, T, r, sigma, option_type='call'):\n",
        "  \"\"\"\n",
        "  Calculates the Theta (time decay) of an option using the Black-Scholes model.\n",
        "  \"\"\"\n",
        "\n",
        "  d1 = (np.log(S / K) + (r + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))\n",
        "  d2 = d1 - sigma * np.sqrt(T)\n",
        "\n",
        "  if option_type == 'call':\n",
        "    return -S * norm.pdf(d1) * sigma / (2 * np.sqrt(T)) - r * K * np.exp(-r * T) * norm.cdf(d2)\n",
        "  else:\n",
        "    return -S * norm.pdf(d1) * sigma / (2 * np.sqrt(T)) + r * K * np.exp(-r * T) * norm.cdf(-d2)\n",
        "\n",
        "def get_vega(S, K, T, r, sigma, option_type='call'):\n",
        "  \"\"\"\n",
        "  Calculates the Vega of an option using the Black-Scholes model.\n",
        "\n",
        "  Returns:\n",
        "    The Vega of the option.\n",
        "  \"\"\"\n",
        "  d1 = (np.log(S / K) + (r + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))\n",
        "\n",
        "  return S * norm.pdf(d1) * np.sqrt(T)\n",
        "\n",
        "def get_delta(S, K, T, r, sigma, option_type='call'):\n",
        "    d1 = (np.log(S / K) + (r + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))\n",
        "    return np.round(norm.cdf(d1) if option_type == 'call' else norm.cdf(d1) - 1, 3)\n",
        "\n",
        "def get_gamma(S, K, T, r, sigma, option_type='call'):\n",
        "  d1 = (np.log(S / K) + (r + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))\n",
        "\n",
        "  return norm.pdf(d1)/(S*sigma*np.sqrt(T))\n",
        "\n",
        "def calculate_correlation_matrix(stock_list):\n",
        "  stock_data = {}\n",
        "  for symbol in stock_list:\n",
        "    stock_data[symbol] = np.array(yf.download(symbol, period='1y')['Close'][symbol])\n",
        "  df = pd.DataFrame(stock_data)\n",
        "  df = df.dropna()\n",
        "  correlation_matrix = df.corr()\n",
        "  fig, ax = plt.subplots(figsize=(12, 12))\n",
        "  return sns.heatmap(correlation_matrix, annot=True, ax=ax)\n",
        "\n",
        "def create_high_correlation_df(correlation_matrix, threshold=0.9):\n",
        "\n",
        "  mask = correlation_matrix > threshold\n",
        "\n",
        "  high_correlation_df = correlation_matrix[mask].stack().reset_index()\n",
        "  high_correlation_df = high_correlation_df[high_correlation_df['level_0'] != high_correlation_df['level_1']]\n",
        "\n",
        "  high_correlation_df.columns = ['Asset1', 'Asset2', 'Correlation']\n",
        "\n",
        "  return high_correlation_df"
      ],
      "metadata": {
        "collapsed": true,
        "id": "NKFj0i1TZJ2-"
      },
      "execution_count": 100,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Code to upload options data"
      ],
      "metadata": {
        "id": "Omr7qhDhAzOI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "firebase_creds = {\n",
        "  \"type\": \"service_account\",\n",
        "  \"project_id\": \"optionsdata-5dc59\",\n",
        "  \"private_key_id\": \"7c5da01f8deb8c7fb3660213e2423f1228aead91\",\n",
        "  \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDBzZ15RlI2usrw\\nUx3uskiIzulwI/a0Sj/rJC7vEY2Y6joqgj8Uu4U9ronTUbJUTCn45A2KIQcG1ecF\\n/gBu91R3YtTGUsLErttRUfTL8zbcQW6cPGnDaspaV2rmGJB+aDgJUqKVNUhB9oxg\\nDbFyLN20eOsXiOZUQsWWQURdCfszreHKKIt9NDOmKWKuDio1TKr9OxH3cznOY4zY\\nscNrAtCLb9Mr6ERO+QTyCA1FDO93eDBEM4hAYkS+rgGk0+GZETUlqxZpP5lltUNA\\nrbbGDq023cCdvqcfRrecbZRpobIzlnX2HPYIlXRk04cNdyzjnog1lkkJnQb/gqCk\\n+nRyjc0zAgMBAAECggEAFSWJbEU3DU++exCmsHf1oC/rmtfhwHRlmxO8p0tkBu5v\\n4FmL5og7lqpn0Y4Vhks1PTotHAhUivNmHOpFQ9Zq+gfnrag0Jl/qAGqP6n0kXE4r\\ncpLI+5C4ebkWKfs+MPzQOHwyz1McCk6LrKNx3EJ3Ao07IbtHXqRWiPmgKwK+zTmY\\nIOakVFPWHrmsVlU3WPLCiz5+135bEGUfTUIx92lvcJRfpw5bnZrNAYME/7A+opmp\\nSq+ytfhb6FlggVKScXXgCVtm6SkWSvLJQfxGJic7ojWx9SDDql1Zy5VfmKID3Nh2\\n1RqAGZuERVKHYIGWn0+HaL/Mqpm7x++5VUS4eLNmyQKBgQDzHdqyD2W/SI+en2nR\\nW7StMlg/Rba7stlenHM2AwD3bhrdiLuOm2BW9ls1aEgIaz7tAYsvG+AXg/pnPjqs\\nkkInJN9/4GjfrRPUS9bwXhiBpzDouczzt5bzoSTkmpRDviC68dY78vEehRdJEQKT\\nAZHatZxoPA+dKNk8MgLK1LQr9QKBgQDMEsUEPvB7yrAshN3scbNcMeD+g0w01edX\\nSIqeGk8AK8QAE0weDrnqSyYBVAsX2PwDof3AOGkMzkFx2d58qNw/LtE8FexnT2n5\\nHRgRY93n67P/Rp3d0ovswltwaIBvwKmLIgNz8zeCoPNiNrO14a+lSrw3kNvDonv0\\nHIvYP3PDhwKBgFHSpW0yQ3NKj5O6YVnl/HwiKpM4+lRX0FLIYvo1rpiYBRC0WTOY\\n1abPCUmDTGMQ/T+1OkvjnNstPxSKXCMCoqMcBOC7/W/yh273C2MguCzCwXJCPll0\\nW6ipfoo2AFqAXfGtPQY2MLKt5nVf9TbW22j5oKdwN20Ud3CMAGaVigIVAoGBALwy\\nGwq9WF1xIGMN7PMeMAA353wPbXnUQdIWje8b5/sKYWiIY0vc3MsanmPfM5O8gTyA\\naViZLReoJmZuO2XO+74w2LiGp0rmy532nLl81aoJjic+4lsszel7m4Pge4GTtUcg\\nCPsnMuv+rjTGqZh0Ft1iPI0pw+F4uML4iGbWrVWFAoGAfbbIy5r6Krb4xwsGLqxN\\ns5DoIDt04A86rZRbrYBDpp5NJ5iCf9CEoT9dHstt6Guty2vSx3NjVkzXgN/5g0ou\\nFx0N2xuO8Cb4N4YsZKXavSznjhUxyGBbme7uMEp6vfMqEby7jKBV4lfNyn3Ev2cI\\ngAWy3ItY7ZNuFcebmT59hpw=\\n-----END PRIVATE KEY-----\\n\",\n",
        "  \"client_email\": \"firebase-adminsdk-fbsvc@optionsdata-5dc59.iam.gserviceaccount.com\",\n",
        "  \"client_id\": \"113695872471697637345\",\n",
        "  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n",
        "  \"token_uri\": \"https://oauth2.googleapis.com/token\",\n",
        "  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n",
        "  \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-fbsvc%40optionsdata-5dc59.iam.gserviceaccount.com\",\n",
        "  \"universe_domain\": \"googleapis.com\"\n",
        "}"
      ],
      "metadata": {
        "id": "9vTsX9F0rt3e"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#code to access firebase\n",
        "\n",
        "if not firebase_admin._apps:\n",
        "  cred = credentials.Certificate(firebase_creds)\n",
        "\n",
        "  # Application Default credentials are automatically created.\n",
        "  app = firebase_admin.initialize_app(cred)\n",
        "else:\n",
        "  app = firebase_admin.get_app()\n",
        "db = firestore.client(app)"
      ],
      "metadata": {
        "id": "9xwe2WzrMeFW"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#method to upload option data\n",
        "\n",
        "def get_option_chains_to_upload(symbol):\n",
        "  raw_options_chains = get_raw_options_data(symbol)\n",
        "  option_expiration_dates = get_expiration_dates(raw_options_chains)\n",
        "  current_date = time.strftime(\"%Y-%m-%d\")\n",
        "  current_price = get_current_price(symbol)\n",
        "  for date in option_expiration_dates:\n",
        "    option_chain_filtered_df = raw_options_chains.loc[symbol, date][required_columns]\n",
        "\n",
        "    option_chain_filtered_df['contractType'] = option_chain_filtered_df['contractSymbol'].apply(\n",
        "      lambda x: get_type_from_ticket(x))\n",
        "\n",
        "    option_chain_filtered_df['impliedVolatility'] = option_chain_filtered_df.apply(\n",
        "      lambda row: calculate_implied_volatility(\n",
        "        (row['bid'] + row['ask']) / 2,\n",
        "        current_price,\n",
        "        row['strike'],\n",
        "        get_days_till_expiry(date) / 252,\n",
        "        risk_free_rate(),\n",
        "        row['contractType'].replace('s', '')\n",
        "        ),\n",
        "      axis=1  # Apply the function row-wise\n",
        "    )\n",
        "    yield {date: option_chain_filtered_df.reset_index(drop=True)}\n",
        "\n",
        "def upload_daily_data(symbol):\n",
        "  if db.collection(symbol).document(datetime.today().strftime('%d-%m-%Y')).get().exists:\n",
        "    print('data already uploaded')\n",
        "    return\n",
        "  option_chains = get_option_chains_to_upload(symbol)\n",
        "  batch = db.batch()\n",
        "  batch_size = 100\n",
        "  count = 0\n",
        "  rate_limit_secs = 1\n",
        "\n",
        "  for obj in option_chains:\n",
        "    exp_date_key = list(obj.keys())[0]\n",
        "    ticket_level_dict = {}\n",
        "    for row in obj[exp_date_key].iterrows():\n",
        "      ticket_level_dict[row[1]['contractSymbol']] = json.loads(row[1][['strike', 'lastPrice', 'volume', 'impliedVolatility', 'contractType']].to_json())\n",
        "    doc_ref = db.collection(symbol).document(datetime.today().strftime('%d-%m-%Y')).collection(exp_date_key).document(generate_uuid())\n",
        "    batch.set(doc_ref, ticket_level_dict)\n",
        "    count += 1\n",
        "    if count >= batch_size:\n",
        "        batch.commit()\n",
        "        batch = db.batch()\n",
        "        count = 0\n",
        "  time.sleep(rate_limit_secs)\n",
        "  # Commit any remaining writes in the last batch\n",
        "  if count > 0:\n",
        "      batch.commit()"
      ],
      "metadata": {
        "id": "ZibeDRJLKbx-",
        "collapsed": true
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Code to get strategy stats for a symbol"
      ],
      "metadata": {
        "id": "M2VBjVtdBpO7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def get_exp_date_from_ticker(ticker):\n",
        "  expiry_match = re.search(r'(\\d{6}[CP])', ticker)\n",
        "  if expiry_match:\n",
        "    expiry_date_str = expiry_match.group(1)\n",
        "    expiry_date = expiry_date_str[:2] + '-' + expiry_date_str[2:4] + '-' + expiry_date_str[4:]\n",
        "    expiry_date = '20' + expiry_date[:-1]\n",
        "    return expiry_date\n",
        "  else:\n",
        "    return None\n",
        "\n",
        "def get_symbol_from_ticker(option_ticker):\n",
        "  symbol_match = re.search(r\"([a-zA-Z]+)\", option_ticker)\n",
        "  if symbol_match:\n",
        "    return symbol_match.group(1)\n",
        "  else:\n",
        "    return None\n",
        "\n",
        "def get_type_from_ticket(ticker,plural = False):\n",
        "  ticker_length = len(ticker)\n",
        "  while ticker_length > 1 :\n",
        "    if ticker[ticker_length - 1] == 'P':\n",
        "      return 'put' if not plural else 'puts'\n",
        "    elif ticker[ticker_length - 1] == 'C':\n",
        "      return 'call' if not plural else 'calls'\n",
        "    else:\n",
        "      ticker_length -= 1\n",
        "  return 'na'\n",
        "\n",
        "def get_strike_from_ticker(ticker):\n",
        "  return int(ticker[-8:]) / 1000\n",
        "\n",
        "def get_filtered_option_chain(raw_data, filters, dropIndex = True):\n",
        "  filtered_data = raw_data\n",
        "  if all(col in raw_data.columns for col in raw_option_data_indexes) and not isinstance(filtered_data.index, pd.MultiIndex):\n",
        "    filtered_data = filtered_data.set_index(raw_option_data_indexes)\n",
        "\n",
        "  for filter in filters:\n",
        "    if filter['data_type'] in raw_option_data_indexes:\n",
        "      if filter['op'] == '=':\n",
        "        filtered_data = filtered_data.loc[filtered_data.index.get_level_values(filter['data_type']) == filter['target']]\n",
        "      elif filter['op'] == '!=':\n",
        "        filtered_data = filtered_data.loc[filtered_data.index.get_level_values(filter['data_type']) != filter['target']]\n",
        "      elif filter['op'] == '>=':\n",
        "        filtered_data = filtered_data.loc[filtered_data.index.get_level_values(filter['data_type']) >= filter['target']]\n",
        "      elif filter['op'] == '<=':\n",
        "        filtered_data = filtered_data.loc[filtered_data.index.get_level_values(filter['data_type']) <= filter['target']]\n",
        "      else:\n",
        "        filtered_data = filtered_data.loc[filtered_data.index.get_level_values(filter['data_type']) == filter['target']]\n",
        "    else:\n",
        "      if filter['op'] == '=':\n",
        "        filtered_data = filtered_data[filtered_data[filter['data_type']] == filter['target']]\n",
        "      elif filter['op'] == '!=':\n",
        "        filtered_data = filtered_data[filtered_data[filter['data_type']] != filter['target']]\n",
        "      elif filter['op'] == '>=':\n",
        "        filtered_data = filtered_data[filtered_data[filter['data_type']] >= filter['target']]\n",
        "      elif filter['op'] == '<=':\n",
        "        filtered_data = filtered_data[filtered_data[filter['data_type']] <= filter['target']]\n",
        "      else:\n",
        "        filtered_data = filtered_data[filtered_data[filter['data_type']] == filter['target']]\n",
        "  if dropIndex:\n",
        "    filtered_df = filtered_data[required_columns].reset_index(drop=True)\n",
        "  else:\n",
        "    filtered_df = filtered_data[required_columns]\n",
        "  return filtered_df\n",
        "\n",
        "\n",
        "\n",
        "def calculate_implied_volatility(option_price, S, K, T, r, option_type='call'):\n",
        "  n = norm.pdf\n",
        "  N = norm.cdf\n",
        "\n",
        "  def black_scholes(option_type,S,K,T,r,v,q=0.0):\n",
        "      d1 = (log(S/K)+(r+v*v/2.)*T)/(v*sqrt(T))\n",
        "      d2 = d1-v*sqrt(T)\n",
        "      if option_type == 'call':\n",
        "          price = S*exp(-q*T)*N(d1)-K*exp(-r*T)*N(d2)\n",
        "      else:\n",
        "          price = K*exp(-r*T)*N(-d2)-S*exp(-q*T)*N(-d1)\n",
        "      return price\n",
        "\n",
        "  def bs_vega(S,K,T,r,v,q=0.0):\n",
        "      d1 = (log(S/K)+(r+v*v/2.)*T)/(v*sqrt(T))\n",
        "      return S * sqrt(T)*n(d1)\n",
        "\n",
        "  vol = 0.5\n",
        "  s = {}\n",
        "  try:\n",
        "    for _ in range(100):\n",
        "        price = black_scholes(option_type, S, K , T , r , vol)\n",
        "        vega = bs_vega(S, K, T, r, vol)\n",
        "        diff = option_price - price\n",
        "        if abs(diff) < 1e-6:\n",
        "            break\n",
        "        if vega == 0.0:\n",
        "            break\n",
        "        vol += diff / vega /100\n",
        "        s[diff] = vol\n",
        "\n",
        "    mindiff =min(list(s.keys()),key=abs)\n",
        "\n",
        "    vol = s[mindiff]\n",
        "\n",
        "    if abs(vol) < 10:\n",
        "      return vol\n",
        "    else:\n",
        "      return 0\n",
        "  except Exception as e:\n",
        "    print(f\"An error occurred during implied volatility calculation: {e}\")\n",
        "    return 0\n",
        "\n",
        "def strike_price_within_delta(option_chain_df, delta_limit ,option_type, current_stock_price = 0, upload_date = datetime.today().strftime('%d-%m-%Y')):\n",
        "  \"\"\"\n",
        "  Finds the strike price within the specified delta limit.\n",
        "\n",
        "  Args:\n",
        "    option_chain_df: A Pandas DataFrame containing option data.\n",
        "    delta_limit: The delta limit to search within.\n",
        "    option_type: The type of option ('call' or 'put').\n",
        "    current_stock_price: The current stock price. Defaults to 0.\n",
        "\n",
        "  Returns:\n",
        "    The strike price with a delta just within the specified limit.\n",
        "  \"\"\"\n",
        "  first_ticker = option_chain_df.iloc[0]['contractSymbol']\n",
        "  symbol = get_symbol_from_ticker(first_ticker)\n",
        "  if current_stock_price == 0:\n",
        "    current_stock_price = get_current_price(symbol)\n",
        "\n",
        "  expiry_match = re.search(r'(\\d{6}[CP])', first_ticker)\n",
        "  expiry_date_str = expiry_match.group(1)\n",
        "  expiry_date = expiry_date_str[:2] + '-' + expiry_date_str[2:4] + '-' + expiry_date_str[4:]\n",
        "  expiry_date = '20' + expiry_date[:-1]\n",
        "  option_type = option_type.replace('s', '')\n",
        "  if option_type == 'put':\n",
        "    delta = 0\n",
        "  elif option_type == 'call':\n",
        "    delta = 1\n",
        "  index = 0\n",
        "  while delta > delta_limit :\n",
        "    if index == len(option_chain_df):\n",
        "      return option_chain_df.iloc[0]['strike']\n",
        "    if 'delta' in option_chain_df.columns and pd.notna(option_chain_df['delta'].iloc[index]) and (option_chain_df['delta'] != 0).any():\n",
        "      delta = option_chain_df['delta'].iloc[index]\n",
        "    else:\n",
        "      tte = get_days_till_expiry(expiry_date, upload_date)/365\n",
        "      rfe = risk_free_rate(upload_date) * tte\n",
        "      delta = get_delta(current_stock_price, option_chain_df['strike'].iloc[index], tte , rfe, option_chain_df['impliedVolatility'].iloc[index], option_type)\n",
        "    index += 1\n",
        "  return option_chain_df.iloc[index - 1]['strike']"
      ],
      "metadata": {
        "id": "FvGtrlDb2bRR"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def get_vertical_credit_spread_stats(short_bid, long_ask, short_strike , long_strike):\n",
        "  \"\"\"Calculates the return, risk, and return-to-risk ratio of a vertical spread.\n",
        "  \"\"\"\n",
        "  max_return = (short_bid - long_ask) * 100\n",
        "  max_risk = (np.abs((short_strike - long_strike)) * 100) - max_return\n",
        "  if short_bid == 0 or long_ask == 0:\n",
        "    print('0 bid or ask encountered')\n",
        "    return {'return' : 0, 'risk': 0 ,'rnr': 0}\n",
        "  else:\n",
        "    if max_risk == 0:\n",
        "      rnr = 0\n",
        "    else:\n",
        "      rnr = max_return / max_risk\n",
        "    return {'return' : max_return, 'risk': max_risk ,'rnr': rnr}\n",
        "\n",
        "def get_vertical_debit_spread_stats(long_ask, short_bid, long_strike , short_strike):\n",
        "  \"\"\"Calculates the return, risk, and return-to-risk ratio of a vertical spread.\n",
        "  \"\"\"\n",
        "  max_risk = (long_ask - short_bid) * 100\n",
        "  max_return = np.abs(short_strike - long_strike) * 100  - max_risk\n",
        "  if long_ask == 0 or short_bid == 0:\n",
        "    print('0 bid or ask encountered')\n",
        "    return {'return' : 0, 'risk': 0 ,'rnr': 0}\n",
        "  else:\n",
        "    if max_risk == 0:\n",
        "      rnr = 0\n",
        "    else:\n",
        "      rnr = max_return / max_risk\n",
        "    return {'return' : max_return, 'risk': max_risk ,'rnr': rnr}\n",
        "\n",
        "def get_optimal_vertical_spread(filtered_data, option_type: Literal[\"puts\", \"calls\"], start_strike, max_risk, credit = True, lastPriceOnly=False):\n",
        "  \"\"\" returns the bid and ask of an optimal vertical spread within filtered data which is an option chain dataframe\n",
        "  \"\"\"\n",
        "  strike_filter = '<=' if option_type == 'puts' else '>='\n",
        "  option_chain = get_filtered_option_chain(filtered_data, [{'data_type' : 'strike', 'op' : strike_filter, 'target' : start_strike}])\n",
        "  correct_option_type = 'put' if option_type == 'puts' else 'call'\n",
        "  if correct_option_type == 'put':\n",
        "    option_chain = option_chain.sort_values(by='strike', ascending=False).reset_index(drop=True)\n",
        "\n",
        "  current_risk = 0\n",
        "  current_rnr = 0\n",
        "  long_index = 0\n",
        "  short_index = 0\n",
        "  for index in range(1, len(option_chain)):\n",
        "    if current_risk > max_risk :\n",
        "      if credit:\n",
        "        return {\n",
        "            'short_strike': option_chain.iloc[0]['strike'],\n",
        "            'short_bid': option_chain.iloc[0]['lastPrice'] if lastPriceOnly else option_chain.iloc[0]['bid'],\n",
        "            'long_strike': option_chain.iloc[long_index - 1]['strike'],\n",
        "            'long_ask': option_chain.iloc[long_index - 1]['lastPrice'] if lastPriceOnly else option_chain.iloc[long_index - 1]['ask']\n",
        "        }\n",
        "      else:\n",
        "        return {\n",
        "            'long_strike': option_chain.iloc[0]['strike'],\n",
        "            'long_ask': option_chain.iloc[0]['lastPrice'] if lastPriceOnly else option_chain.iloc[0]['ask'],\n",
        "            'short_strike': option_chain.iloc[short_index - 1]['strike'],\n",
        "            'short_bid': option_chain.iloc[short_index - 1]['lastPrice'] if lastPriceOnly else option_chain.iloc[short_index - 1]['bid']\n",
        "        }\n",
        "    if credit:\n",
        "      short_price = option_chain.iloc[0]['lastPrice'] if lastPriceOnly else option_chain.iloc[0]['bid']\n",
        "      long_price = option_chain.iloc[index]['lastPrice'] if lastPriceOnly else option_chain.iloc[index]['ask']\n",
        "\n",
        "      stats = get_vertical_credit_spread_stats(\n",
        "          short_price,\n",
        "          long_price,\n",
        "          option_chain.iloc[0]['strike'],\n",
        "          option_chain.iloc[index]['strike']\n",
        "      )\n",
        "\n",
        "      current_risk = stats['risk']\n",
        "      long_index = index\n",
        "    else:\n",
        "      long_price = option_chain.iloc[0]['lastPrice'] if lastPriceOnly else option_chain.iloc[0]['ask']\n",
        "      short_price = option_chain.iloc[0]['lastPrice'] if lastPriceOnly else option_chain.iloc[index]['bid']\n",
        "\n",
        "      stats = get_vertical_debit_spread_stats(\n",
        "        long_price,\n",
        "        short_price,\n",
        "        option_chain.iloc[0]['strike'],\n",
        "        option_chain.iloc[index]['strike']\n",
        "      )\n",
        "\n",
        "      current_risk = stats['risk']\n",
        "\n",
        "      if current_risk == 0:\n",
        "        break\n",
        "      short_index = index\n",
        "  if credit:\n",
        "    return {\n",
        "        'short_strike': option_chain.iloc[0]['strike'],\n",
        "        'short_bid': option_chain.iloc[0]['lastPrice'] if lastPriceOnly else option_chain.iloc[0]['bid'],\n",
        "        'long_strike': option_chain.iloc[long_index - 1]['strike'],\n",
        "        'long_ask': option_chain.iloc[long_index - 1]['lastPrice'] if lastPriceOnly else option_chain.iloc[long_index - 1]['ask']\n",
        "    }\n",
        "  else:\n",
        "    return {\n",
        "      'long_strike': option_chain.iloc[0]['strike'],\n",
        "      'long_ask': option_chain.iloc[0]['lastPrice'] if lastPriceOnly else option_chain.iloc[0]['ask'],\n",
        "      'short_strike': option_chain.iloc[short_index - 1]['strike'],\n",
        "      'short_bid': option_chain.iloc[short_index - 1]['lastPrice'] if lastPriceOnly else option_chain.iloc[short_index - 1]['bid'],\n",
        "  }\n",
        "\n",
        "def get_iron_condor(symbol, raw_data, expiration_date, symbol_current_price, delta_limits , max_risk, credit = True):\n",
        "  put_spread_filters = [\n",
        "      {'data_type' : 'symbol', 'op' : '=', 'target' : symbol},\n",
        "      {'data_type' : 'expiration', 'op' : '=', 'target' : expiration_date},\n",
        "      {'data_type' : 'optionType', 'op' : '=', 'target' : 'puts'},\n",
        "      {'data_type' : 'strike', 'op' : '<=', 'target' : symbol_current_price}\n",
        "  ]\n",
        "  filtered_put_chain = get_filtered_option_chain(raw_data, put_spread_filters)\n",
        "  put_start_price = strike_price_within_delta(filtered_put_chain, min(delta_limits), 'put')\n",
        "  if credit:\n",
        "    optimal_put_spread = get_optimal_vertical_spread(filtered_put_chain, 'puts', put_start_price, max_risk)\n",
        "    put_spread_stats = get_vertical_credit_spread_stats(optimal_put_spread['short_bid'], optimal_put_spread['long_ask'], optimal_put_spread['short_strike'], optimal_put_spread['long_strike'])\n",
        "  else:\n",
        "    optimal_put_spread = get_optimal_vertical_spread(filtered_put_chain, 'puts', put_start_price, max_risk, False)\n",
        "    put_spread_stats = get_vertical_debit_spread_stats(optimal_put_spread['long_ask'], optimal_put_spread['short_bid'], optimal_put_spread['long_strike'], optimal_put_spread['short_strike'])\n",
        "  call_spread_filters = [\n",
        "      {'data_type' : 'symbol', 'op' : '=', 'target' : symbol},\n",
        "      {'data_type' : 'expiration', 'op' : '=', 'target' : expiration_date},\n",
        "      {'data_type' : 'optionType', 'op' : '=', 'target' : 'calls'},\n",
        "      {'data_type' : 'strike', 'op' : '>=', 'target' : symbol_current_price}\n",
        "  ]\n",
        "  filtered_call_chain = get_filtered_option_chain(raw_data, call_spread_filters)\n",
        "  call_start_price = strike_price_within_delta(filtered_call_chain, max(delta_limits), 'call')\n",
        "  if credit:\n",
        "    optimal_call_spread = get_optimal_vertical_spread(filtered_call_chain, 'calls', call_start_price, max_risk)\n",
        "    call_spread_stats = get_vertical_credit_spread_stats(optimal_call_spread['short_bid'], optimal_call_spread['long_ask'], optimal_call_spread['short_strike'], optimal_call_spread['long_strike'])\n",
        "  else:\n",
        "    optimal_call_spread = get_optimal_vertical_spread(filtered_call_chain, 'calls', call_start_price, max_risk, False)\n",
        "    call_spread_stats = get_vertical_debit_spread_stats(optimal_call_spread['long_ask'], optimal_call_spread['short_bid'], optimal_call_spread['long_strike'], optimal_call_spread['short_strike'])\n",
        "  if credit:\n",
        "    total_return = put_spread_stats['return'] + call_spread_stats['return']\n",
        "    widest_spread_width = max(abs(optimal_put_spread['short_strike'] - optimal_put_spread['long_strike']), abs(optimal_call_spread['short_strike'] - optimal_call_spread['long_strike']))\n",
        "    total_risk = widest_spread_width*100 - total_return\n",
        "    rnr = total_return / total_risk if total_risk != 0 else 0\n",
        "    return {\n",
        "        'credit_put_spread': optimal_put_spread,\n",
        "        'credit_call_spread': optimal_call_spread,\n",
        "        'return': total_return,\n",
        "        'risk': total_risk,\n",
        "        'rnr': rnr\n",
        "    }\n",
        "  else:\n",
        "    total_return = max(put_spread_stats['return'] , call_spread_stats['return'])\n",
        "    total_risk = put_spread_stats['risk'] + call_spread_stats['risk']\n",
        "    rnr = total_return / total_risk if total_risk != 0 else 0\n",
        "    return {\n",
        "        'debit_put_spread': optimal_put_spread,\n",
        "        'debit_call_spread': optimal_call_spread,\n",
        "        'return': total_return,\n",
        "        'risk': total_risk,\n",
        "        'rnr': rnr\n",
        "    }"
      ],
      "metadata": {
        "id": "5WlIwMa6gqxE"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def get_optimal_strategies(symbol, raw_data , strategies: List[StrategyParams], expiration_dates: List[str], max_risk, posRnrOnly=True):\n",
        "  \"\"\" For each strategy param in strategies and for each expiration date, returns the optimal legs for that strategy\n",
        "  \"\"\"\n",
        "\n",
        "  symbol_current_price = get_current_price(symbol)\n",
        "  strategies_df = []\n",
        "  for strategy in strategies:\n",
        "    if 'spread' in strategy['name']:\n",
        "      for expiration_date in expiration_dates:\n",
        "        option_type = 'puts' if 'put' in strategy['name'] else 'calls'\n",
        "        strike_filter = '<=' if option_type == 'puts' else '>='\n",
        "        filtered_option_chain = get_filtered_option_chain(raw_data, [\n",
        "            {'data_type' : 'symbol', 'op' : '=', 'target' : symbol},\n",
        "            {'data_type' : 'expiration', 'op' : '=', 'target' : expiration_date},\n",
        "            {'data_type' : 'optionType', 'op' : '=', 'target' : option_type},\n",
        "            {'data_type' : 'strike', 'op' : strike_filter, 'target' : symbol_current_price}\n",
        "        ])\n",
        "        start_price = strike_price_within_delta(filtered_option_chain, strategy['delta_limit'], option_type.replace('s',''))\n",
        "        if 'credit' in strategy['name']:\n",
        "          optimal_spread = get_optimal_vertical_spread(filtered_option_chain, option_type, start_price, max_risk)\n",
        "        else:\n",
        "          optimal_spread = get_optimal_vertical_spread(filtered_option_chain, option_type, start_price, max_risk, False)\n",
        "        try:\n",
        "          if 'credit' in strategy['name']:\n",
        "            optimal_spread_stats = get_vertical_credit_spread_stats(optimal_spread['short_bid'], optimal_spread['long_ask'], optimal_spread['short_strike'], optimal_spread['long_strike'])\n",
        "          else:\n",
        "            optimal_spread_stats = get_vertical_debit_spread_stats(optimal_spread['long_ask'], optimal_spread['short_bid'], optimal_spread['long_strike'], optimal_spread['short_strike'])\n",
        "        except RuntimeWarning:\n",
        "          optimal_spread_stats = {'return' : 0, 'risk': max_risk ,'rnr': 0}\n",
        "        strategies_df.append({\n",
        "            'strategy_name': strategy['name'],\n",
        "            'expiration_date': expiration_date,\n",
        "            'return': optimal_spread_stats['return'],\n",
        "            'risk': optimal_spread_stats['risk'],\n",
        "            'rnr': optimal_spread_stats['rnr'],\n",
        "            'max_risk': max_risk,\n",
        "            'legs': optimal_spread\n",
        "        })\n",
        "    if 'iron_condor' in strategy['name']:\n",
        "      isCredit = True if 'credit' in strategy['name'] else False\n",
        "      for expiration_date in expiration_dates:\n",
        "        iron_condor = get_iron_condor(symbol, raw_data, expiration_date, symbol_current_price, strategy['delta_limit'], max_risk, isCredit)\n",
        "        if isCredit:\n",
        "          legs = {\n",
        "              'credit_put_spread': iron_condor['debit_put_spread'],\n",
        "              'credit_call_spread': iron_condor['debit_call_spread']\n",
        "          }\n",
        "        else:\n",
        "           legs = {\n",
        "              'debit_put_spread': iron_condor['debit_put_spread'],\n",
        "              'debit_call_spread': iron_condor['debit_call_spread']\n",
        "           }\n",
        "        strategies_df.append({\n",
        "            'strategy_name': strategy['name'],\n",
        "            'expiration_date': expiration_date,\n",
        "            'return': iron_condor['return'],\n",
        "            'risk': iron_condor['risk'],\n",
        "            'rnr': iron_condor['rnr'],\n",
        "            'max_risk': max_risk,\n",
        "            'legs': legs\n",
        "        })\n",
        "  strategies_df = pd.DataFrame(strategies_df).sort_values(by='rnr', ascending=False)\n",
        "  if posRnrOnly == True:\n",
        "    strategies_df = strategies_df[strategies_df['rnr'] > 0]\n",
        "  return strategies_df"
      ],
      "metadata": {
        "id": "rwZKYZToh2tk"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def get_optimal_strategies_multiple(multiple_symbol_data, strategies, max_risk):\n",
        "  total_strategy_stats = {}\n",
        "  for symbol, data in symbol_data.items():\n",
        "    raw_data = data.raw_data\n",
        "    expiration_dates_in_range = data.expiration_dates\n",
        "    optimal_strategies = get_optimal_strategies(symbol, raw_data, strategies, expiration_dates_in_range, max_risk)\n",
        "    total_strategy_stats[symbol] = optimal_strategies\n",
        "    print(symbol + ' done')\n",
        "  all_symbol_strategies = []\n",
        "  for symbol, df in total_strategy_stats.items():\n",
        "    df['symbol'] = symbol\n",
        "    all_symbol_strategies.append(df)\n",
        "\n",
        "  final_df = pd.concat(all_symbol_strategies, ignore_index=True)\n",
        "  final_df = final_df[['symbol'] + [col for col in final_df.columns if col != 'symbol']]\n",
        "  final_df = final_df.sort_values(by='rnr', ascending=False)\n",
        "\n",
        "  return final_df"
      ],
      "metadata": {
        "id": "uVXbA3OLniMN"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class Symbol:\n",
        "  def __init__(self, symbol, date_range):\n",
        "    self.symbol = symbol\n",
        "\n",
        "    self.raw_data: RawOptionsData = get_raw_options_data(symbol)\n",
        "    self.expiration_dates = get_expiration_dates(self.raw_data, [get_future_date(date_range[0]), get_future_date(date_range[1])], True)\n",
        "    self.current_price = get_current_price(symbol)\n",
        "\n",
        "class HistoricalSymbol:\n",
        "  def __init__(self, symbol, upload_date, date_range):\n",
        "    self.symbol = symbol.upper()\n",
        "    self.upload_date = upload_date\n",
        "\n",
        "    self.upload_date_dt = datetime.strptime(upload_date, '%d-%m-%Y')\n",
        "    self.expiration_dates = get_historical_expiration_dates(symbol, self.upload_date, date_range)\n",
        "    self.historical_raw_data = [ transform_firebase_data(get_all_documents(symbol, self.upload_date, date)) for date in self.expiration_dates ]\n",
        "    self.historical_price = get_historical_price(symbol, self.upload_date_dt.strftime('%Y-%m-%d')).iloc[0]\n",
        "    self.expiration_date_index_map = {date: index for index, date in enumerate(self.expiration_dates)}"
      ],
      "metadata": {
        "collapsed": true,
        "id": "EExcM46H9C7C"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "strategies = [{ 'name' : 'call_credit_spread', 'delta_limit': 0.3}, {'name' : 'put_credit_spread', 'delta_limit': -0.3}, {'name' : 'credit_iron_condor', 'delta_limit': [0.3, -0.3]},\n",
        "              { 'name' : 'debit_call_spread', 'delta_limit': 0.3}, { 'name' : 'debit_put_spread', 'delta_limit': -0.3}, {'name' : 'debit_iron_condor', 'delta_limit': [0.3, -0.3]}]"
      ],
      "metadata": {
        "id": "_FibSqRzpRWg"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "# code to get stats about open trades"
      ],
      "metadata": {
        "id": "baq6tLBSiG52"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def get_open_spread_stats(strategy_stats, symbol, symbol_data):\n",
        "  symbol = symbol.lower()\n",
        "  current_price = symbol_data.current_price\n",
        "  raw_data = symbol_data.raw_data\n",
        "  strategy_name = strategy_stats['strategy_name']\n",
        "  expiration_date = strategy_stats['expiration_date']\n",
        "  legs = strategy_stats['legs']\n",
        "\n",
        "  pnl = None\n",
        "  close = False\n",
        "  status = 'open'\n",
        "\n",
        "  option_type = 'put' if 'put' in strategy_name else 'call'\n",
        "  long_strike = legs['long_strike']\n",
        "  short_strike = legs['short_strike']\n",
        "\n",
        "  option_chain_filtered = get_filtered_option_chain(raw_data, [\n",
        "      {'data_type': 'symbol', 'op': '=', 'target': symbol},\n",
        "      {'data_type': 'expiration', 'op': '=', 'target': expiration_date},\n",
        "      {'data_type': 'optionType', 'op': '=', 'target': option_type + 's'}\n",
        "  ])\n",
        "\n",
        "  if 'credit' in strategy_name:\n",
        "    short_option_price = option_chain_filtered[option_chain_filtered['strike'] == short_strike]['ask'].iloc[0]\n",
        "    long_option_price = option_chain_filtered[option_chain_filtered['strike'] == long_strike]['bid'].iloc[0]\n",
        "    initial_premium_received = strategy_stats['max_return']\n",
        "    cost_to_close = (short_option_price - long_option_price) * 100\n",
        "    pnl = initial_premium_received - cost_to_close\n",
        "\n",
        "    if pnl < strategy_stats['max_risk'] * -0.5:\n",
        "        close = True\n",
        "        status = 'loss'\n",
        "    elif pnl > initial_premium_received * 0.5:\n",
        "        close = True\n",
        "        status = 'profit'\n",
        "\n",
        "  elif 'debit' in strategy_name:\n",
        "    long_option_price = option_chain_filtered[option_chain_filtered['strike'] == long_strike]['bid'].iloc[0]\n",
        "    short_option_price = option_chain_filtered[option_chain_filtered['strike'] == short_strike]['ask'].iloc[0]\n",
        "    initial_cost_paid = strategy_stats['max_risk']\n",
        "    current_value = (long_option_price - short_option_price) * 100\n",
        "    pnl = current_value - initial_cost_paid\n",
        "\n",
        "    if pnl < initial_cost_paid * -0.5:\n",
        "        close = True\n",
        "        status = 'loss'\n",
        "    elif pnl > initial_cost_paid * 0.5:\n",
        "        close = True\n",
        "        status = 'profit'\n",
        "\n",
        "  dte = get_days_till_expiry(strategy_stats['expiration_date'])\n",
        "  if dte < 7:\n",
        "    status = 'profit' if pnl > 0 else 'loss'\n",
        "\n",
        "  return {\n",
        "      'pnl': pnl,\n",
        "      'close': close,\n",
        "      'status': status\n",
        "  }\n",
        "\n",
        "def get_open_condor_stats(strategy_stats, symbol, symbol_data):\n",
        "  symbol = symbol.lower()\n",
        "  raw_data = symbol_data.raw_data\n",
        "  expiration_date = strategy_stats['expiration_date']\n",
        "  legs = strategy_stats['legs']\n",
        "  strategy_name = strategy_stats['strategy_name']\n",
        "\n",
        "  pnl = None\n",
        "  close = False\n",
        "  status = 'open'\n",
        "\n",
        "  if 'credit' in strategy_name:\n",
        "    put_spread = legs['credit_put_spread']\n",
        "    call_spread = legs['credit_call_spread']\n",
        "\n",
        "    put_option_chain_filtered = get_filtered_option_chain(raw_data, [\n",
        "        {'data_type': 'symbol', 'op': '=', 'target': symbol},\n",
        "        {'data_type': 'expiration', 'op': '=', 'target': expiration_date},\n",
        "        {'data_type': 'optionType', 'op': '=', 'target': 'puts'}\n",
        "    ])\n",
        "    short_put_price = put_option_chain_filtered[put_option_chain_filtered['strike'] == put_spread['short_strike']]['ask'].iloc[0]\n",
        "    long_put_price = put_option_chain_filtered[put_option_chain_filtered['strike'] == put_spread['long_strike']]['bid'].iloc[0]\n",
        "    cost_to_close_put = (short_put_price - long_put_price) * 100\n",
        "\n",
        "    call_option_chain_filtered = get_filtered_option_chain(raw_data, [\n",
        "        {'data_type': 'symbol', 'op': '=', 'target': symbol},\n",
        "        {'data_type': 'expiration', 'op': '=', 'target': expiration_date},\n",
        "        {'data_type': 'optionType', 'op': '=', 'target': 'calls'}\n",
        "    ])\n",
        "\n",
        "    short_call_price = call_option_chain_filtered[call_option_chain_filtered['strike'] == call_spread['short_strike']]['ask'].iloc[0]\n",
        "    long_call_price = call_option_chain_filtered[call_option_chain_filtered['strike'] == call_spread['long_strike']]['bid'].iloc[0]\n",
        "    cost_to_close_call = (short_call_price - long_call_price) * 100\n",
        "\n",
        "    initial_premium_received = strategy_stats['max_return']\n",
        "    cost_to_close_total = cost_to_close_put + cost_to_close_call\n",
        "    pnl = initial_premium_received - cost_to_close_total\n",
        "\n",
        "    if pnl < strategy_stats['max_risk'] * -0.5:\n",
        "        close = True\n",
        "        status = 'loss'\n",
        "    elif pnl > initial_premium_received * 0.5:\n",
        "        close = True\n",
        "        status = 'profit'\n",
        "\n",
        "  elif 'debit' in strategy_name:\n",
        "    put_spread = legs['debit_put_spread']\n",
        "    call_spread = legs['debit_call_spread']\n",
        "\n",
        "    put_option_chain_filtered = get_filtered_option_chain(raw_data, [\n",
        "        {'data_type': 'symbol', 'op': '=', 'target': symbol},\n",
        "        {'data_type': 'expiration', 'op': '=', 'target': expiration_date},\n",
        "        {'data_type': 'optionType', 'op': '=', 'target': 'puts'}\n",
        "    ])\n",
        "    long_put_price = put_option_chain_filtered[put_option_chain_filtered['strike'] == put_spread['long_strike']]['bid'].iloc[0]\n",
        "    short_put_price = put_option_chain_filtered[put_option_chain_filtered['strike'] == put_spread['short_strike']]['ask'].iloc[0]\n",
        "    current_value_put = (long_put_price - short_put_price) * 100\n",
        "\n",
        "    call_option_chain_filtered = get_filtered_option_chain(raw_data, [\n",
        "        {'data_type': 'symbol', 'op': '=', 'target': symbol},\n",
        "        {'data_type': 'expiration', 'op': '=', 'target': expiration_date},\n",
        "        {'data_type': 'optionType', 'op': '=', 'target': 'calls'}\n",
        "    ])\n",
        "    long_call_price = call_option_chain_filtered[call_option_chain_filtered['strike'] == call_spread['long_strike']]['bid'].iloc[0]\n",
        "    short_call_price = call_option_chain_filtered[call_option_chain_filtered['strike'] == call_spread['short_strike']]['ask'].iloc[0]\n",
        "\n",
        "    current_value_call = (long_call_price - short_call_price) * 100\n",
        "\n",
        "    initial_cost_paid = strategy_stats['max_risk']\n",
        "    current_value_total = current_value_put + current_value_call\n",
        "    pnl = current_value_total - initial_cost_paid\n",
        "\n",
        "    if pnl < initial_cost_paid * -0.5:\n",
        "        close = True\n",
        "        status = 'loss'\n",
        "    elif pnl > initial_cost_paid * 0.5:\n",
        "        close = True\n",
        "        status = 'profit'\n",
        "\n",
        "    dte = get_days_till_expiry(strategy_stats['expiration_date'])\n",
        "    if dte < 7:\n",
        "      status = 'profit' if pnl > 0 else 'loss'\n",
        "\n",
        "  return {\n",
        "      'pnl': pnl,\n",
        "      'close': close,\n",
        "      'status': status\n",
        "  }\n"
      ],
      "metadata": {
        "collapsed": true,
        "id": "uvRaovlMvDF3"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def get_earliest_date_with_open_trades(symbol):\n",
        "  symbol = symbol.upper()\n",
        "  \"\"\"\n",
        "  Finds the earliest date in the 'trades' collection for a given symbol\n",
        "  that contains documents with the status 'open'.\n",
        "  \"\"\"\n",
        "\n",
        "  trades_ref = db.collection('trades').document(symbol).collections()\n",
        "  collections = [col.id for col in trades_ref]\n",
        "  collections.sort(key=lambda date: datetime.strptime(date, '%d-%m-%Y'))\n",
        "\n",
        "  for date in collections:\n",
        "    docs = db.collection('trades').document(symbol).collection(date).stream()\n",
        "    for doc in docs:\n",
        "      if doc.to_dict().get('status') == 'open':\n",
        "        return date\n",
        "  return None"
      ],
      "metadata": {
        "id": "hZ6yi0vYiwUn"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def get_strategy_legs_from_id(id):\n",
        "  symbol = get_symbol_from_ticker(id)\n",
        "  upload_date = convert_datestring(id[-10:], 'dd-mm-yyyy', 'dd-mm-yyyy')\n",
        "  doc_ref = db.collection('iv_stats').document(symbol).collection(upload_date).document('stats')\n",
        "  doc = doc_ref.get()\n",
        "\n",
        "  if doc.exists:\n",
        "    data = doc.to_dict()\n",
        "    for strategy in data['strategies_to_open']:\n",
        "      if strategy.get('id') == id:\n",
        "        return strategy.get('legs')\n",
        "        return None\n",
        "  else:\n",
        "    return None"
      ],
      "metadata": {
        "id": "Q3tA7VmhjmAW"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Code to get option stats"
      ],
      "metadata": {
        "id": "3i04f1m1Cb_j"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def get_iv_from_option_chain(option_chain: RawOptionsDataRow, optionTypes, mode='atm', historical_spot = 0):\n",
        "  symbol = get_symbol_from_ticker(option_chain['contractSymbol'].iloc[0])\n",
        "  if historical_spot == 0:\n",
        "    spot_price = get_current_price(symbol)\n",
        "  else:\n",
        "    spot_price = historical_spot\n",
        "  iv_values = []\n",
        "\n",
        "  for optionType in optionTypes:\n",
        "    option_chain_filtered = get_filtered_option_chain(option_chain, [{'data_type': 'optionType', 'op': '=', 'target': optionType}])\n",
        "    if mode == 'atm':\n",
        "      option_chain_filtered = get_filtered_option_chain(option_chain_filtered, [{'data_type': 'strike', 'op': '>=' , 'target':  spot_price}])\n",
        "      iv_values.append(option_chain_filtered['impliedVolatility'].iloc[0])\n",
        "    elif mode == 'average':\n",
        "      iv_values.append(option_chain_filtered['impliedVolatility'].mean())\n",
        "    elif mode == 'weighted':\n",
        "      weights = []\n",
        "      for option in option_chain_filtered.iterrows():\n",
        "        distance = np.abs(option[1]['strike'] - spot_price)\n",
        "        if distance == 0:\n",
        "          distance = 1\n",
        "        weights.append(1 / distance)\n",
        "      iv_values.append(np.average(option_chain_filtered['impliedVolatility'], weights=weights))\n",
        "  return np.mean(iv_values)\n",
        "\n",
        "def calculate_atm_iv_from_option_chain(data_instance, historical = False):\n",
        "  \"\"\"\n",
        "  Calculates the implied volatility of the ATM options for a given Symbol or HistoricalSymbol instance.\n",
        "\n",
        "  Args:\n",
        "    data_instance: An instance of Symbol or HistoricalSymbol.\n",
        "    historical: A boolean indicating whether the instance is HistoricalSymbol (True) or Symbol (False).\n",
        "\n",
        "  Returns:\n",
        "    The average implied volatility of the ATM call and put options.\n",
        "  \"\"\"\n",
        "  expiration_date = data_instance.expiration_dates[0]\n",
        "  if historical:\n",
        "    filtered_option_chain = data_instance.historical_raw_data[0].reset_index()\n",
        "    filtered_option_chain['optionType'] = [ x.replace('s', '') for x in filtered_option_chain['optionType'] ]\n",
        "    current_price = data_instance.historical_price\n",
        "    current_date = data_instance.upload_date_dt\n",
        "  else:\n",
        "    filtered_option_chain = get_filtered_option_chain(data_instance.raw_data, [{'data_type': 'expiration', 'op': '=', 'target': expiration_date}])\n",
        "    current_price = data_instance.current_price\n",
        "    current_date = datetime.today()\n",
        "    filtered_option_chain['optionType'] = filtered_option_chain['contractSymbol'].apply(lambda x: get_type_from_ticket(x))\n",
        "\n",
        "  atm_strike = round(data_instance.historical_price) if historical else round(data_instance.current_price)\n",
        "  current_call_price = filtered_option_chain[(filtered_option_chain['optionType'] == 'call') & (filtered_option_chain['strike'] >= atm_strike)]['lastPrice'].iloc[0]\n",
        "  current_put_price = filtered_option_chain[(filtered_option_chain['optionType'] == 'put') & (filtered_option_chain['strike'] <= atm_strike)]['lastPrice'].iloc[-1]\n",
        "  call_iv = calculate_implied_volatility(current_call_price, current_price, atm_strike, get_days_till_expiry(expiration_date, current_date.strftime('%Y-%m-%d'))/252, risk_free_rate(), 'call')\n",
        "  put_iv = calculate_implied_volatility(current_put_price, current_price, atm_strike, get_days_till_expiry(expiration_date, current_date.strftime('%Y-%m-%d'))/252, risk_free_rate(), 'put')\n",
        "  current_iv = (call_iv + put_iv )/ 2\n",
        "\n",
        "  return current_iv"
      ],
      "metadata": {
        "id": "ekkTFL4hCfUH"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def get_historical_vol(symbol, lookback_period, end_date):\n",
        "  if end_date is None:\n",
        "    end_date = datetime.today()\n",
        "  if lookback_period == 0:\n",
        "    data = yf.download(symbol, period='1d')\n",
        "  else:\n",
        "    start_date = end_date - timedelta(days=lookback_period)\n",
        "    data = yf.download(symbol, start=start_date, end=end_date)\n",
        "  daily_returns = data['Close'].pct_change()\n",
        "  std_daily_returns = np.std(daily_returns)\n",
        "  annualized_vol = std_daily_returns * np.sqrt(252)\n",
        "  return annualized_vol.iloc[0]"
      ],
      "metadata": {
        "id": "1OyjxNp8XXBs"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def plot_option_chain_iv(option_chain, current_price, save=False, path=''):\n",
        "\n",
        "  calls = get_filtered_option_chain(option_chain, [{'data_type': 'optionType', 'op': '=', 'target': 'calls'}])\n",
        "  puts = get_filtered_option_chain(option_chain, [{'data_type': 'optionType', 'op': '=', 'target': 'puts'}])\n",
        "\n",
        "  plt.figure(figsize=(18, 12))\n",
        "  plt.scatter(calls['strike'], calls['impliedVolatility'], color='blue', label='Calls', s=10)\n",
        "  plt.scatter(puts['strike'], puts['impliedVolatility'], color='red', label='Puts', s=10)\n",
        "\n",
        "  plt.axvline(x=current_price, color='black', linestyle='--', label='Current Price')\n",
        "\n",
        "  plt.xlabel('Strike Price')\n",
        "  plt.ylabel('Implied Volatility')\n",
        "  plt.title('Implied Volatility vs. Strike Price')\n",
        "\n",
        "  plt.legend()\n",
        "  plt.grid(True)\n",
        "\n",
        "  plt.show()\n",
        "\n",
        "  if save == True:\n",
        "    plt.savefig(path)"
      ],
      "metadata": {
        "id": "yVIimgmr3WdN"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def plot_option_chain_iv_multiple(historical_raw_data, current_price, log = False):\n",
        "    plt.figure(figsize=(20, 12))\n",
        "    expiration_dates = [get_exp_date_from_ticker(option_chain['contractSymbol'].iloc[0]) for option_chain in historical_raw_data]\n",
        "\n",
        "    num_expiration_dates = len(expiration_dates)\n",
        "    cmap = cm.get_cmap('viridis', num_expiration_dates)\n",
        "\n",
        "    for i, option_chain in enumerate(historical_raw_data):\n",
        "        calls = get_filtered_option_chain(option_chain, [{'data_type': 'optionType', 'op': '=', 'target': 'calls'}])\n",
        "        puts = get_filtered_option_chain(option_chain, [{'data_type': 'optionType', 'op': '=', 'target': 'puts'}])\n",
        "\n",
        "        common_strikes = np.intersect1d(calls['strike'], puts['strike'])\n",
        "\n",
        "        iv_means = []\n",
        "        for strike in common_strikes:\n",
        "            call_iv = calls[calls['strike'] == strike]['impliedVolatility'].values[0]\n",
        "            put_iv = puts[puts['strike'] == strike]['impliedVolatility'].values[0]\n",
        "            iv_means.append(np.mean([call_iv, put_iv]))\n",
        "\n",
        "        expiration_date = expiration_dates[i]\n",
        "\n",
        "        color = cmap(i)\n",
        "\n",
        "        plt.scatter(common_strikes, iv_means, color=color, label=f'Average IV - {expiration_date}', s=5, alpha=1)\n",
        "\n",
        "    if log == True:\n",
        "      plt.yscale('log')\n",
        "\n",
        "    plt.axvline(x=current_price, color='black', linestyle='--', label='Current Price')\n",
        "    plt.xlabel('Strike Price')\n",
        "    plt.ylabel('Implied Volatility')\n",
        "    plt.title('Implied Volatility vs. Strike Price for All Option Chains')\n",
        "    plt.legend()\n",
        "    plt.grid(True)\n",
        "    plt.show()\n"
      ],
      "metadata": {
        "id": "D5djmlowA1RN"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def get_iv_index(symbol ,current_date = datetime.today(), lookback_period  = 30):\n",
        "  if isinstance(current_date, str):\n",
        "    current_date = datetime.strptime(current_date, '%d-%m-%Y')\n",
        "  start_date = current_date - timedelta(days=lookback_period)\n",
        "  dates = get_all_trading_dates_in_range(start_date.strftime('%d-%m-%Y'), current_date.strftime('%d-%m-%Y'))\n",
        "  current_data = Symbol(symbol, [30, 40])\n",
        "  option_chain = get_filtered_option_chain(current_data.raw_data, [{'data_type': 'expiration', 'op': '=', 'target': current_data.expiration_dates[0]}], False)\n",
        "  current_iv = get_iv_from_option_chain(option_chain, ['calls', 'puts'], 'atm', current_data.current_price)\n",
        "  past_ivs = []\n",
        "  for date in dates:\n",
        "    try:\n",
        "      historical_data = HistoricalSymbol(symbol, date, [30, 40])\n",
        "      option_chain = historical_data.historical_raw_data[0]\n",
        "      past_ivs.append(get_iv_from_option_chain(option_chain, ['calls', 'puts'], 'atm', historical_data.historical_price))\n",
        "    except Exception as e:\n",
        "      print(f\"Error fetching data for {date}: {e}\")\n",
        "      pass\n",
        "\n",
        "  if len(past_ivs) == 0:\n",
        "    iv_index = 50\n",
        "  else:\n",
        "    sorted_past_ivs = sorted(past_ivs)\n",
        "    if current_iv <= sorted_past_ivs[0]:\n",
        "      iv_index = 0\n",
        "    elif current_iv >= sorted_past_ivs[-1]:\n",
        "      iv_index = 100\n",
        "    else:\n",
        "      count_less_than_current = sum(1 for iv in sorted_past_ivs if iv < current_iv)\n",
        "      iv_index = (count_less_than_current / len(sorted_past_ivs)) * 100\n",
        "\n",
        "  return iv_index"
      ],
      "metadata": {
        "id": "ABKPiTGiBxZp"
      },
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def get_pearsons_coefficient_df(df):\n",
        "  \"\"\"\n",
        "  Calculates the Pearson's correlation coefficient between each column of a\n",
        "  DataFrame and its index.\n",
        "\n",
        "  Args:\n",
        "    df: The input DataFrame.\n",
        "\n",
        "  Returns:\n",
        "    A Pandas Series where the index is the column names of the input DataFrame,\n",
        "    and the values are the corresponding Pearson's correlation coefficients.\n",
        "  \"\"\"\n",
        "  index_series = df.index.to_series()  # Convert index to Series\n",
        "  pearson_coeffs = {}\n",
        "  for col in df.columns:\n",
        "    pearson_coeffs[col] = df[col].corr(index_series)\n",
        "  return pd.Series(pearson_coeffs)  # Return as Series\n",
        "\n",
        "def get_iv_stats(symbol, option_chain: RawOptionsData , additional_data = [], historical_price = '', upload_date = ''):\n",
        "  expiration_date = get_exp_date_from_ticker(option_chain['contractSymbol'].iloc[0])\n",
        "  if upload_date != '':\n",
        "    upload_date_dt = datetime.strptime(upload_date, '%d-%m-%Y')\n",
        "    historical_vol = get_historical_vol(symbol, get_days_till_expiry(expiration_date, upload_date), upload_date_dt)\n",
        "  else:\n",
        "    historical_vol = get_historical_vol(symbol, get_days_till_expiry(expiration_date), None)\n",
        "  iv_stats = {}\n",
        "  iv_stats['iv_atm'] = round(get_iv_from_option_chain(option_chain, ['calls', 'puts'], 'atm', historical_price), 3)\n",
        "  iv_stats['iv_average'] = round(get_iv_from_option_chain(option_chain, ['calls', 'puts'], 'average', historical_price), 3)\n",
        "  iv_stats['iv_weighted'] = round(get_iv_from_option_chain(option_chain, ['calls', 'puts'], 'weighted', historical_price), 3)\n",
        "  iv_stats['iv_puts'] = round(get_iv_from_option_chain(option_chain, ['puts'], 'atm', historical_price), 3)\n",
        "  iv_stats['iv_calls'] = round(get_iv_from_option_chain(option_chain, ['calls'], 'atm', historical_price), 3)\n",
        "  iv_stats['put_call_iv_ratio'] = round(iv_stats['iv_puts'] / iv_stats['iv_calls'], 3)\n",
        "  iv_stats['hv'] = round(historical_vol, 3)\n",
        "  iv_stats['iv_hv_ratio'] = round(iv_stats['iv_atm'] / historical_vol, 3)\n",
        "  return iv_stats\n",
        "\n",
        "def get_multiple_iv_stats(symbol, option_chains, showPlots = False, additional_data = [], historical_price = 0, upload_date = datetime.today().strftime('%d-%m-%Y')):\n",
        "  iv_stats_over_time = []\n",
        "  expiration_dates = []\n",
        "  for option_chain in option_chains:\n",
        "    expiration_date = get_exp_date_from_ticker(option_chain['contractSymbol'].iloc[0])\n",
        "    expiration_dates.append(expiration_date)\n",
        "    iv_stats = get_iv_stats(symbol, option_chain, additional_data, historical_price , upload_date)\n",
        "    iv_stats_over_time.append(iv_stats)\n",
        "\n",
        "  iv_stats_df = pd.DataFrame(iv_stats_over_time)\n",
        "  iv_stats_df['expiration'] = [f\"{date} - {get_days_till_expiry(date, upload_date)}\" for date in expiration_dates]\n",
        "\n",
        "  iv_stats_df = iv_stats_df.set_index('expiration')\n",
        "\n",
        "  if showPlots:\n",
        "    for column in iv_stats_df.columns:\n",
        "      if column != 'expiration':\n",
        "        plt.figure(figsize=(10, 6))\n",
        "        plt.scatter(iv_stats_df.index, iv_stats_df[column])\n",
        "        plt.xlabel('Expiration Date - Days till Expiry')\n",
        "        plt.ylabel(column)\n",
        "        plt.title(f'{column} vs. Expiration Date')\n",
        "        plt.xticks(rotation=45, ha='right')\n",
        "        plt.tight_layout()\n",
        "        plt.show()\n",
        "  return iv_stats_df"
      ],
      "metadata": {
        "id": "rhAs9woFWzIY"
      },
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def get_iv_outliers_from_option_chain(option_chain):\n",
        "  option_chain_copy = option_chain.copy()\n",
        "  option_chain_copy['rolling_mean_iv'] = option_chain_copy['impliedVolatility'].rolling(window=7, center=True).mean()\n",
        "  option_chain_copy['iv_diff'] = option_chain_copy['impliedVolatility'] - option_chain_copy['rolling_mean_iv']\n",
        "  threshold = 150 * np.percentile(option_chain_copy['iv_diff'].dropna(), 75) - np.percentile(option_chain_copy['iv_diff'].dropna(), 25)\n",
        "  outliers = option_chain_copy[np.abs(option_chain_copy['iv_diff']) > threshold]\n",
        "  outliers_df = outliers[['contractSymbol', 'strike', 'impliedVolatility']]\n",
        "  return outliers_df"
      ],
      "metadata": {
        "id": "CdfbD1pE5jPD"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def get_volume_analysis(option_chain, plot=False):\n",
        "  option_chain_vol = option_chain[['strike', 'volume']].copy()\n",
        "  return option_chain_vol"
      ],
      "metadata": {
        "id": "Pap2x_CcyZ2h"
      },
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Custom methods for backtesting"
      ],
      "metadata": {
        "id": "cyysGXET_GhQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: given a symbol, upload date and optionally expiry date get all option chains\n",
        "\n",
        "def get_all_documents(symbol, upload_date, expiry_date = '') -> List[FirebaseOptionDataDict]:\n",
        "  symbol = symbol.upper()\n",
        "  try:\n",
        "    if expiry_date == '':\n",
        "      collections_ref = db.collection(symbol).document(upload_date).collections()\n",
        "      all_documents = []\n",
        "      for collection_ref in collections_ref:\n",
        "        docs = collection_ref.stream()\n",
        "        for doc in docs:\n",
        "          all_documents.append(doc.to_dict())\n",
        "    else:\n",
        "      ref = db.collection(symbol).document(upload_date).collection(expiry_date)\n",
        "      all_documents = []\n",
        "      docs = ref.stream()\n",
        "      for doc in docs:\n",
        "        all_documents.append(doc.to_dict())\n",
        "    return all_documents\n",
        "  except Exception as e:\n",
        "    print(f\"Error retrieving documents: {e}\")\n",
        "    return []"
      ],
      "metadata": {
        "id": "9uX2aoGnUUio",
        "collapsed": true
      },
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def get_historical_expiration_dates(symbol, upload_date , date_range : List[int] ):\n",
        "  symbol = symbol.upper()\n",
        "  upload_date_collection_ref = db.collection(symbol).document(upload_date)\n",
        "  expiry_dates = [x.id for x in upload_date_collection_ref.collections()]\n",
        "\n",
        "  expiry_dates_formatted = [datetime.strptime(date_str, '%Y-%m-%d').date() for date_str in expiry_dates]\n",
        "  upload_date_formatted = datetime.strptime(upload_date, \"%d-%m-%Y\").date()\n",
        "\n",
        "  filtered_expiry_dates = [\n",
        "      date_str.strftime('%Y-%m-%d')\n",
        "      for date_str in expiry_dates_formatted\n",
        "      if date_range[0] <= (date_str - upload_date_formatted).days <= date_range[1]\n",
        "  ]\n",
        "\n",
        "  return filtered_expiry_dates"
      ],
      "metadata": {
        "id": "zxrYRumHXueQ"
      },
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def transform_firebase_data(data: List[FirebaseOptionData]):\n",
        "  rows = []\n",
        "  for item in data:\n",
        "    for key , val in item.items():\n",
        "      row = val.copy()\n",
        "      row['optionType'] = get_type_from_ticket(key) + 's'\n",
        "      row['expiration'] = get_exp_date_from_ticker(key)\n",
        "      row['contractSymbol'] = key\n",
        "      rows.append(row)\n",
        "  df = pd.DataFrame(rows)\n",
        "  df = df.sort_values(by=['optionType', 'strike'], ascending=[True, True])\n",
        "  df = df.set_index('optionType')\n",
        "  for col in required_columns:\n",
        "    if col not in df.columns:\n",
        "      df[col] = 0\n",
        "  return df"
      ],
      "metadata": {
        "id": "OGVontc8_-a6"
      },
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def replace_iv(option_chain_df, spot_price, upload_date):\n",
        "  ivs = []\n",
        "  for index, row in option_chain_df.iterrows():\n",
        "    option_type = get_type_from_ticket(row['contractSymbol']).replace('s', '')\n",
        "    price = row['lastPrice']\n",
        "    strike = row['strike']\n",
        "    tte = get_days_till_expiry(get_exp_date_from_ticker(row['contractSymbol']), upload_date) / 252\n",
        "    ivs.append(calculate_implied_volatility(price, spot_price, strike, tte, risk_free_rate(), option_type))\n",
        "\n",
        "  option_chain_df['impliedVolatility'] = smooth_array(ivs)\n",
        "  return option_chain_df"
      ],
      "metadata": {
        "collapsed": true,
        "id": "Cd8cHpq75MbB"
      },
      "execution_count": 40,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def get_iv_stat_metrics(symbol_data, historical = False) -> IVStatsDict:\n",
        "  data = symbol_data\n",
        "  symbol = data.symbol\n",
        "  raw_data = symbol_data.historical_raw_data if historical else symbol_data.raw_data\n",
        "  spot_price = symbol_data.historical_price if historical else symbol_data.current_price\n",
        "  upload_date = symbol_data.upload_date if historical else datetime.today().strftime('%d-%m-%Y')\n",
        "  option_chain_list = symbol_data.historical_raw_data if historical else []\n",
        "  if not historical:\n",
        "    for date in data.expiration_dates:\n",
        "      option_chain = get_filtered_option_chain(raw_data, [{'data_type': 'expiration', 'op': '=', 'target': date}], False)\n",
        "      option_chain_list.append(option_chain)\n",
        "  stats = {}\n",
        "  iv_stats_df = get_multiple_iv_stats(data.symbol, option_chain_list, False, [], spot_price, upload_date )\n",
        "  iv_stats_df_filtered = iv_stats_df.drop(columns=['iv_weighted', 'iv_average','hv']).reset_index(drop=True)\n",
        "  stats = {}\n",
        "\n",
        "  pearson_coeffs = get_pearsons_coefficient_df(iv_stats_df_filtered)\n",
        "  for col, coeff in pearson_coeffs.items():\n",
        "      stats[f'{col}_pearson_coeff'] = round(coeff, 3)\n",
        "\n",
        "  mean_averages = iv_stats_df_filtered.mean()\n",
        "  for col, mean_val in mean_averages.items():\n",
        "      stats[f'{col}_mean'] = round(mean_val, 3)\n",
        "\n",
        "  if historical == False:\n",
        "    iv_index = get_iv_index(symbol)\n",
        "    stats['iv_index_mean'] = iv_index\n",
        "\n",
        "  return stats"
      ],
      "metadata": {
        "id": "mSNSiReAIfgk"
      },
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def retrieve_latest_iv_stats(symbol, date):\n",
        "  symbol = symbol.upper()\n",
        "  try:\n",
        "    doc_ref = db.collection('iv_stats').document(symbol).collection(date)\n",
        "    docs = doc_ref.stream()\n",
        "    for doc in docs:\n",
        "      stats = doc.to_dict()\n",
        "    return stats\n",
        "  except Exception as e:\n",
        "    print(f\"Error retrieving IV stats from Firebase: {e}\")\n",
        "    return None\n",
        "\n",
        "def get_recommended_strategies(stats : IVStatsDict, threshold = 5):\n",
        "  strategies: List[StrategyParams] = []\n",
        "  strategy_to_stats_map = {\n",
        "    \"credit_iron_condor\" : {\n",
        "        \"iv_atm_pearson_coeff\" : stats['iv_atm_pearson_coeff'] < -0.5,\n",
        "        \"iv_hv_ratio_mean\": stats['iv_hv_ratio_mean'] > 1,\n",
        "        \"iv_hv_ratio_pearson_coeff\" : stats['iv_hv_ratio_pearson_coeff'] < -0.5,\n",
        "        \"iv_calls_pearson_coeff\": stats['iv_calls_pearson_coeff'] < 0,\n",
        "        \"iv_puts_pearson_coeff\": stats['iv_puts_pearson_coeff'] < 0,\n",
        "        \"put_call_iv_ratio_mean\": 0.9 < stats['put_call_iv_ratio_mean'] < 1.1,\n",
        "        \"put_call_iv_ratio_pearson_coeff\": -0.8 < stats['put_call_iv_ratio_pearson_coeff'] < 0.8,\n",
        "        \"iv_index\" : stats['iv_index_mean'] > 30\n",
        "    },\n",
        "    \"debit_iron_condor\" : {\n",
        "      \"iv_atm_pearson_coeff\" : stats['iv_atm_pearson_coeff'] > 0.5,\n",
        "      \"iv_hv_ratio_mean\": stats['iv_hv_ratio_mean'] < 1,\n",
        "      \"iv_hv_ratio_pearson_coeff\" : stats['iv_hv_ratio_pearson_coeff'] > 0.5,\n",
        "      \"iv_calls_pearson_coeff\": stats['iv_calls_pearson_coeff'] > 0,\n",
        "      \"iv_puts_pearson_coeff\": stats['iv_puts_pearson_coeff'] > 0,\n",
        "      \"put_call_iv_ratio_mean\": 0.9 < stats['put_call_iv_ratio_mean'] < 1.1,\n",
        "      \"put_call_iv_ratio_pearson_coeff\": -0.8 < stats['put_call_iv_ratio_pearson_coeff'] < 0.8,\n",
        "      \"iv_index\" : stats['iv_index_mean'] < 30\n",
        "    },\n",
        "    \"credit_put_spread\" : {\n",
        "      \"iv_atm_pearson_coeff\" : stats['iv_atm_pearson_coeff'] < -0.5,\n",
        "      \"iv_hv_ratio_mean\": stats['iv_hv_ratio_mean'] > 1,\n",
        "      \"iv_hv_ratio_pearson_coeff\" : stats['iv_hv_ratio_pearson_coeff'] < -0.5,\n",
        "      \"iv_calls_pearson_coeff\": stats['iv_calls_pearson_coeff'] > 0.5,\n",
        "      \"iv_puts_pearson_coeff\": stats['iv_puts_pearson_coeff'] < -0.5,\n",
        "      \"put_call_iv_ratio_mean\": stats['put_call_iv_ratio_mean'] > 1,\n",
        "      \"put_call_iv_ratio_pearson_coeff\": stats['put_call_iv_ratio_pearson_coeff'] < 0,\n",
        "      \"iv_index\" : stats['iv_index_mean'] > 30\n",
        "    },\n",
        "    \"credit_call_spread\" : {\n",
        "      \"iv_atm_pearson_coeff\" : stats['iv_atm_pearson_coeff'] < -0.5,\n",
        "      \"iv_hv_ratio_mean\": stats['iv_hv_ratio_mean'] > 1,\n",
        "      \"iv_hv_ratio_pearson_coeff\" : stats['iv_hv_ratio_pearson_coeff'] < -0.5,\n",
        "      \"iv_calls_pearson_coeff\": stats['iv_calls_pearson_coeff'] < -0.5,\n",
        "      \"iv_puts_pearson_coeff\": stats['iv_puts_pearson_coeff'] > 0.5,\n",
        "      \"put_call_iv_ratio_mean\": stats['put_call_iv_ratio_mean'] < 1,\n",
        "      \"put_call_iv_ratio_pearson_coeff\": stats['put_call_iv_ratio_pearson_coeff'] > 0,\n",
        "      \"iv_index\" : stats['iv_index_mean'] > 30\n",
        "    },\n",
        "    \"debit_put_spread\" : {\n",
        "      \"iv_atm_pearson_coeff\" : stats['iv_atm_pearson_coeff'] > 0.5,\n",
        "      \"iv_hv_ratio_mean\": stats['iv_hv_ratio_mean'] < 1,\n",
        "      \"iv_hv_ratio_pearson_coeff\" : stats['iv_hv_ratio_pearson_coeff'] > 0.5,\n",
        "      \"iv_calls_pearson_coeff\": stats['iv_calls_pearson_coeff']  > 0,\n",
        "      \"iv_puts_pearson_coeff\": stats['iv_puts_pearson_coeff'] > 0.5,\n",
        "      \"put_call_iv_ratio_mean\": stats['put_call_iv_ratio_mean'] > 1,\n",
        "      \"put_call_iv_ratio_pearson_coeff\": stats['put_call_iv_ratio_pearson_coeff'] > 0,\n",
        "      \"iv_index\" : stats['iv_index_mean'] < 30\n",
        "    },\n",
        "    \"debit_call_spread\" : {\n",
        "      \"iv_atm_pearson_coeff\" : stats['iv_atm_pearson_coeff'] > 0.5,\n",
        "      \"iv_hv_ratio_mean\": stats['iv_hv_ratio_mean'] < 1,\n",
        "      \"iv_hv_ratio_pearson_coeff\" : stats['iv_hv_ratio_pearson_coeff'] > 0.5,\n",
        "      \"iv_calls_pearson_coeff\": stats['iv_calls_pearson_coeff']  > 0.5,\n",
        "      \"iv_puts_pearson_coeff\": stats['iv_puts_pearson_coeff'] < 0,\n",
        "      \"put_call_iv_ratio_mean\": stats['put_call_iv_ratio_mean'] < 1.1,\n",
        "      \"put_call_iv_ratio_pearson_coeff\": stats['put_call_iv_ratio_pearson_coeff'] < 0,\n",
        "      \"iv_index\" : stats['iv_index_mean'] < 30\n",
        "    },\n",
        "    }\n",
        "\n",
        "  for strategy_name, conditions in strategy_to_stats_map.items():\n",
        "    conditions_met = sum(conditions.values())\n",
        "    if conditions_met >= threshold:\n",
        "      if 'spread' in strategy_name:\n",
        "        strategies.append({'name' : strategy_name, 'delta' : 0.3 if 'debit' in strategy_name else -0.3})\n",
        "      else:\n",
        "        strategies.append({'name' : strategy_name, 'delta' : [0.3, -0.3]})\n",
        "\n",
        "  return strategies"
      ],
      "metadata": {
        "id": "5bawN_gCowzr"
      },
      "execution_count": 42,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "spy_strategies = get_recommended_strategies(retrieve_latest_iv_stats('spy', '21-05-2025'))"
      ],
      "metadata": {
        "id": "KXn1q865eZUV"
      },
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def get_next_expiry_date(symbol, upload_date, DTE):\n",
        "  '''\n",
        "    Params : symbol e.g. AAPL , upload_date : upload date to get data from in yy-mm-dd format , DTE : days to expiry\n",
        "    returns : next expiry date in yy-mm-dd format which can be a document id for an option chain.\n",
        "  '''\n",
        "  try:\n",
        "    upload_date_collection_ref = db.collection(symbol).document(upload_date)\n",
        "    expiry_dates = [x.id for x in upload_date_collection_ref.collections()]\n",
        "    expiry_dates_formatted = [datetime.strptime(date_str, '%Y-%m-%d') for date_str in expiry_dates]\n",
        "    upload_date_add_dte = datetime.strptime(upload_date, \"%d-%m-%Y\") + timedelta(days=DTE)\n",
        "    upload_date_add_dte = upload_date_add_dte\n",
        "    expiry_dates_formatted = [x for x in expiry_dates_formatted if x > upload_date_add_dte]\n",
        "    expiry_dates_formatted.sort()\n",
        "    expiry_date = expiry_dates_formatted[0].strftime('%Y-%m-%d')\n",
        "  except Exception as e:\n",
        "    print(e)\n",
        "    return 'na'\n",
        "  return expiry_date"
      ],
      "metadata": {
        "id": "_vQNOAUoO9Ct"
      },
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def get_ticker_from_option_props(symbol, expiration_date, option_type , strike):\n",
        "  symbol_upper = symbol.upper()\n",
        "\n",
        "  expiration_date_dt = datetime.strptime(convert_datestring(expiration_date, 'dd-mm-yyyy','yyyy-mm-dd'), '%Y-%m-%d')\n",
        "  expiration_date_yymmdd = expiration_date_dt.strftime('%y%m%d')\n",
        "\n",
        "  option_type_char = 'C' if option_type == 'call' else 'P'\n",
        "\n",
        "  strike_str = str(int(strike * 1000)).zfill(8)\n",
        "\n",
        "  return f\"{symbol_upper}{expiration_date_yymmdd}{option_type_char}{strike_str}\""
      ],
      "metadata": {
        "id": "sAhlaD8jn9fe"
      },
      "execution_count": 45,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def get_ticker_prices(ticker, start_date, end_date, priceType = 'lastPrice'):\n",
        "  symbol = get_symbol_from_ticker(ticker)\n",
        "  expiration_date = get_exp_date_from_ticker(ticker)\n",
        "  strike_price = get_strike_from_ticker(ticker)\n",
        "  option_type = get_type_from_ticket(ticker)\n",
        "\n",
        "  strike_filter_sign = '>=' if option_type == 'call' else '<='\n",
        "  filters = [{'data_type': 'optionType', 'op': '=', 'target': option_type + 's'},{'data_type': 'strike', 'op': strike_filter_sign, 'target': strike_price} ]\n",
        "\n",
        "  if start_date == end_date:\n",
        "    dte = get_days_till_expiry(expiration_date, start_date)\n",
        "    historical_data = HistoricalSymbol(symbol, start_date, [dte, dte + 1])\n",
        "    option_chain = get_filtered_option_chain(historical_data.historical_raw_data[0], filters, False)\n",
        "    if option_type == 'put':\n",
        "      option_chain = option_chain.sort_values(by='strike', ascending=False)\n",
        "    return option_chain.iloc[0][priceType]\n",
        "  else:\n",
        "    last_prices = {}\n",
        "    trading_days = get_all_trading_dates_in_range(start_date, end_date, returnFormat='%d-%m-%Y', includeEndDate=True)\n",
        "    for day in trading_days:\n",
        "      dte = get_days_till_expiry(expiration_date, day)\n",
        "      historical_data = HistoricalSymbol(symbol, day, [dte, dte + 1])\n",
        "      if len(historical_data.historical_raw_data) > 0:\n",
        "        option_chain = historical_data.historical_raw_data[0]\n",
        "        option_chain = get_filtered_option_chain(option_chain, filters, False)\n",
        "        if option_type == 'put':\n",
        "          option_chain = option_chain.sort_values(by='strike', ascending=False)\n",
        "        last_prices[day] = option_chain.iloc[0][priceType]\n",
        "      else:\n",
        "        last_prices[day] = np.nan\n",
        "    return last_prices"
      ],
      "metadata": {
        "id": "yD9EQHwdlBCC"
      },
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def create_plot_for_option_chars(option_data , feature, target,upload_date ,expiration_date = '', spot_price = '', expiration_dates = [], filters = [], chartStyle = 'scatter'):\n",
        "  \"\"\"\n",
        "  Creates a plot showing the relationship of an option's property e.g. greeks by either strike or DTE\n",
        "\n",
        "  Args:\n",
        "    option_data : either an option chain or a series of option chains\n",
        "    feature : strike or dte\n",
        "    target: option property e.g. delta or price\n",
        "    filters : filter for target outliers  e.g. {'op' : '<=', 'target' : 100}\n",
        "    chartStyle : scatter or line\n",
        "  \"\"\"\n",
        "\n",
        "  greeks = ['delta', 'gamma', 'theta', 'vega']\n",
        "\n",
        "  if expiration_dates == [] and expiration_date != '' and spot_price != 0 :\n",
        "    values_calls = {}\n",
        "    values_puts = {}\n",
        "\n",
        "    # Filter by option type for both dataframes\n",
        "    calls_data = get_filtered_option_chain(\n",
        "        option_chain_1,\n",
        "        [{'data_type': 'optionType', 'op': '=', 'target': 'calls'}],\n",
        "    )\n",
        "    puts_data = get_filtered_option_chain(\n",
        "        option_chain_1,\n",
        "        [{'data_type': 'optionType', 'op': '=', 'target': 'puts'}],\n",
        "    )\n",
        "\n",
        "    tte = get_days_till_expiry(expiration_date, '30-05-2025') / 365\n",
        "    rfr = risk_free_rate(upload_date) * tte\n",
        "\n",
        "    greek_getter_function = get_delta if target == 'delta' else get_gamma if target == 'gamma' else get_theta if target == 'theta' else get_vega\n",
        "\n",
        "    for index, row in calls_data_1.iterrows():\n",
        "        strike = row['strike']\n",
        "        sigma = row['impliedVolatility']\n",
        "        values_calls[strike] = greek_getter_function(spy_historical_data.historical_price, strike, tte, rfr, sigma, 'call' )\n",
        "\n",
        "    for index, row in puts_data_1.iterrows():\n",
        "        strike = row['strike']\n",
        "        sigma = row['impliedVolatility']\n",
        "        values_puts[strike] = greek_getter_function(spy_historical_data.historical_price, strike, tte, rfr, sigma, 'put')\n",
        "\n",
        "\n",
        "    plt.figure(figsize=(10, 6))\n",
        "\n",
        "    plt.scatter(values_calls.keys(), values_calls.values(), label='Calls', alpha=0.6, s=8)\n",
        "\n",
        "    plt.scatter(values_puts.keys(), values_puts.values(), label='Puts', alpha=0.6, s=8)\n",
        "\n",
        "    plt.axvline(x=spot_price, color='r', linestyle='--', label='Spot Price')\n",
        "\n",
        "    plt.xlabel(feature)\n",
        "    plt.ylabel(target)\n",
        "    plt.title(f\"{feature} vs {target} for calls and puts\")\n",
        "    plt.legend()\n",
        "    plt.grid(True)\n",
        "    plt.show()"
      ],
      "metadata": {
        "id": "-DS4nFGzqSqN"
      },
      "execution_count": 108,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "spy_historical_data = HistoricalSymbol('spy', '30-05-2025', [1, 130])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "28uaAkiyRGRK",
        "outputId": "0b1147f0-8a3b-4553-fc2b-e121e9c3a2f3"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-15-23de2af429dd>:22: FutureWarning: YF.download() has changed argument auto_adjust default to True\n",
            "  data = yf.download(symbol, start=past_date)\n",
            "[*********************100%***********************]  1 of 1 completed\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "option_data = spy_historical_data.historical_raw_data[spy_historical_data.expiration_date_index_map['2025-06-30']]"
      ],
      "metadata": {
        "id": "MFriwFoQv5GT"
      },
      "execution_count": 83,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "create_plot_for_option_chars(option_data, 'strike', 'delta', '30-05-2025', '2025-06-30', spy_historical_data.historical_price)"
      ],
      "metadata": {
        "id": "baeYWTJPv_Qz",
        "outputId": "8c3dfea5-1837-46ed-bd36-b1cbdab9dba5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 618
        }
      },
      "execution_count": 109,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-100-d935acbd5e73>:67: FutureWarning: YF.download() has changed argument auto_adjust default to True\n",
            "  data = yf.download('^IRX', start=start_date_str, end=end_date_str)\n",
            "\r[*********************100%***********************]  1 of 1 completed\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "spot_1 = spy_historical_data.historical_price\n",
        "spot_2 = spy_historical_data_2.historical_price"
      ],
      "metadata": {
        "id": "mHcswYt4QnFw"
      },
      "execution_count": 50,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "vega_values_calls = {}\n",
        "vega_values_puts = {}\n",
        "\n",
        "expiration_dates = list(set(spy_historical_data.expiration_dates) & set(spy_historical_data_2.expiration_dates))\n",
        "\n",
        "# Get the option chains for the specified expiration date from both historical data objects\n",
        "option_chain_1 = spy_historical_data.historical_raw_data[spy_historical_data.expiration_date_index_map['2025-06-30']]\n",
        "\n",
        "# Filter by option type for both dataframes\n",
        "calls_data_1 = get_filtered_option_chain(\n",
        "    option_chain_1,\n",
        "    [{'data_type': 'optionType', 'op': '=', 'target': 'calls'}],\n",
        ")\n",
        "puts_data_1 = get_filtered_option_chain(\n",
        "    option_chain_1,\n",
        "    [{'data_type': 'optionType', 'op': '=', 'target': 'puts'}],\n",
        ")\n",
        "\n",
        "tte = get_days_till_expiry('2025-06-30', '30-05-2025') / 365\n",
        "rfr = risk_free_rate() * tte\n",
        "\n",
        "# Calculate gamma for calls\n",
        "for index, row in calls_data_1.iterrows():\n",
        "    strike = row['strike']\n",
        "    sigma = row['impliedVolatility']\n",
        "    vega_values_calls[strike] = get_vega(spy_historical_data.historical_price, strike, tte, rfr, sigma )\n",
        "\n",
        "# Calculate gamma for puts\n",
        "for index, row in puts_data_1.iterrows():\n",
        "    strike = row['strike']\n",
        "    sigma = row['impliedVolatility']\n",
        "    vega_values_puts[strike] = get_vega(spy_historical_data.historical_price, strike, tte, rfr, sigma)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VzC_I35FDMp7",
        "outputId": "0edcbdfe-5e7f-484e-dbb1-398e6094316d"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-58-758964ec817d>:70: FutureWarning: YF.download() has changed argument auto_adjust default to True\n",
            "  data = yf.download('^IRX', period = '1d')\n",
            "\r[*********************100%***********************]  1 of 1 completed\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "vega_values_calls_atm = {}\n",
        "vega_values_puts_atm = {}\n",
        "vega_values_calls_otm = {}\n",
        "vega_values_puts_otm = {}\n",
        "vega_values_calls_far_otm = {}\n",
        "vega_values_puts_far_otm = {}\n",
        "\n",
        "atm_strike = 590\n",
        "otm_call_strike = 600\n",
        "far_otm_call_strike = 610\n",
        "otm_put_strike = 580\n",
        "far_otm_put_strike = 570\n",
        "\n",
        "for date in expiration_dates:\n",
        "\n",
        "  tte = get_days_till_expiry(date, '30-05-2025') / 365\n",
        "  rfr = risk_free_rate()\n",
        "  days_till_expiry = get_days_till_expiry(date, '30-05-2025')\n",
        "\n",
        "  # ATM Calls\n",
        "  calls_data_atm = get_filtered_option_chain(\n",
        "      spy_historical_data.historical_raw_data[spy_historical_data.expiration_date_index_map[date]],\n",
        "      [{'data_type': 'optionType', 'op': '=', 'target': 'calls'}, {'data_type': 'strike', 'op': '=', 'target': atm_strike}]\n",
        "  )\n",
        "  if not calls_data_atm.empty:\n",
        "      call_sigma_atm = calls_data_atm.iloc[0]['impliedVolatility']\n",
        "      vega_values_calls_atm[days_till_expiry] = get_vega(spy_historical_data.historical_price, atm_strike, tte, rfr, call_sigma_atm)\n",
        "\n",
        "  # ATM Puts\n",
        "  puts_data_atm = get_filtered_option_chain(\n",
        "      spy_historical_data.historical_raw_data[spy_historical_data.expiration_date_index_map[date]],\n",
        "      [{'data_type': 'optionType', 'op': '=', 'target': 'puts'}, {'data_type': 'strike', 'op': '=', 'target': atm_strike}]\n",
        "  )\n",
        "  if not puts_data_atm.empty:\n",
        "      put_sigma_atm = puts_data_atm.iloc[0]['impliedVolatility']\n",
        "      vega_values_puts_atm[days_till_expiry] = get_vega(spy_historical_data.historical_price, atm_strike, tte, rfr, put_sigma_atm)\n",
        "\n",
        "  # OTM Calls\n",
        "  calls_data_otm = get_filtered_option_chain(\n",
        "      spy_historical_data.historical_raw_data[spy_historical_data.expiration_date_index_map[date]],\n",
        "      [{'data_type': 'optionType', 'op': '=', 'target': 'calls'}, {'data_type': 'strike', 'op': '=', 'target': otm_call_strike}]\n",
        "  )\n",
        "  if not calls_data_otm.empty:\n",
        "      call_sigma_otm = calls_data_otm.iloc[0]['impliedVolatility']\n",
        "      vega_values_calls_otm[days_till_expiry] = get_vega(spy_historical_data.historical_price, otm_call_strike, tte, rfr, call_sigma_otm)\n",
        "\n",
        "  # OTM Puts\n",
        "  puts_data_otm = get_filtered_option_chain(\n",
        "      spy_historical_data.historical_raw_data[spy_historical_data.expiration_date_index_map[date]],\n",
        "      [{'data_type': 'optionType', 'op': '=', 'target': 'puts'}, {'data_type': 'strike', 'op': '=', 'target': otm_put_strike}]\n",
        "  )\n",
        "  if not puts_data_otm.empty:\n",
        "      put_sigma_otm = puts_data_otm.iloc[0]['impliedVolatility']\n",
        "      vega_values_puts_otm[days_till_expiry] = get_vega(spy_historical_data.historical_price, otm_put_strike, tte, rfr, put_sigma_otm)\n",
        "\n",
        "  # Far OTM Calls\n",
        "  calls_data_far_otm = get_filtered_option_chain(\n",
        "      spy_historical_data.historical_raw_data[spy_historical_data.expiration_date_index_map[date]],\n",
        "      [{'data_type': 'optionType', 'op': '=', 'target': 'calls'}, {'data_type': 'strike', 'op': '=', 'target': far_otm_call_strike}]\n",
        "  )\n",
        "  if not calls_data_far_otm.empty:\n",
        "      call_sigma_far_otm = calls_data_far_otm.iloc[0]['impliedVolatility']\n",
        "      vega_values_calls_far_otm[days_till_expiry] = get_vega(spy_historical_data.historical_price, far_otm_call_strike, tte, rfr, call_sigma_far_otm)\n",
        "\n",
        "  # Far OTM Puts\n",
        "  puts_data_far_otm = get_filtered_option_chain(\n",
        "      spy_historical_data.historical_raw_data[spy_historical_data.expiration_date_index_map[date]],\n",
        "      [{'data_type': 'optionType', 'op': '=', 'target': 'puts'}, {'data_type': 'strike', 'op': '=', 'target': far_otm_put_strike}]\n",
        "  )\n",
        "  if not puts_data_far_otm.empty:\n",
        "      put_sigma_far_otm = puts_data_far_otm.iloc[0]['impliedVolatility']\n",
        "      vega_values_puts_far_otm[days_till_expiry] = get_vega(spy_historical_data.historical_price, far_otm_put_strike, tte, rfr, put_sigma_far_otm)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "wEleAeV2PKYf",
        "outputId": "8768b129-e920-4ece-908b-c9133c65663f"
      },
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-58-758964ec817d>:70: FutureWarning: YF.download() has changed argument auto_adjust default to True\n",
            "  data = yf.download('^IRX', period = '1d')\n",
            "\r[*********************100%***********************]  1 of 1 completed\n",
            "<ipython-input-58-758964ec817d>:70: FutureWarning: YF.download() has changed argument auto_adjust default to True\n",
            "  data = yf.download('^IRX', period = '1d')\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "<ipython-input-58-758964ec817d>:70: FutureWarning: YF.download() has changed argument auto_adjust default to True\n",
            "  data = yf.download('^IRX', period = '1d')\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "<ipython-input-58-758964ec817d>:70: FutureWarning: YF.download() has changed argument auto_adjust default to True\n",
            "  data = yf.download('^IRX', period = '1d')\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "<ipython-input-58-758964ec817d>:70: FutureWarning: YF.download() has changed argument auto_adjust default to True\n",
            "  data = yf.download('^IRX', period = '1d')\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "<ipython-input-58-758964ec817d>:70: FutureWarning: YF.download() has changed argument auto_adjust default to True\n",
            "  data = yf.download('^IRX', period = '1d')\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "<ipython-input-58-758964ec817d>:70: FutureWarning: YF.download() has changed argument auto_adjust default to True\n",
            "  data = yf.download('^IRX', period = '1d')\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "<ipython-input-58-758964ec817d>:70: FutureWarning: YF.download() has changed argument auto_adjust default to True\n",
            "  data = yf.download('^IRX', period = '1d')\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "<ipython-input-58-758964ec817d>:70: FutureWarning: YF.download() has changed argument auto_adjust default to True\n",
            "  data = yf.download('^IRX', period = '1d')\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "<ipython-input-58-758964ec817d>:70: FutureWarning: YF.download() has changed argument auto_adjust default to True\n",
            "  data = yf.download('^IRX', period = '1d')\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "<ipython-input-58-758964ec817d>:70: FutureWarning: YF.download() has changed argument auto_adjust default to True\n",
            "  data = yf.download('^IRX', period = '1d')\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "<ipython-input-58-758964ec817d>:70: FutureWarning: YF.download() has changed argument auto_adjust default to True\n",
            "  data = yf.download('^IRX', period = '1d')\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "<ipython-input-58-758964ec817d>:70: FutureWarning: YF.download() has changed argument auto_adjust default to True\n",
            "  data = yf.download('^IRX', period = '1d')\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "<ipython-input-58-758964ec817d>:70: FutureWarning: YF.download() has changed argument auto_adjust default to True\n",
            "  data = yf.download('^IRX', period = '1d')\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "<ipython-input-58-758964ec817d>:70: FutureWarning: YF.download() has changed argument auto_adjust default to True\n",
            "  data = yf.download('^IRX', period = '1d')\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "<ipython-input-58-758964ec817d>:70: FutureWarning: YF.download() has changed argument auto_adjust default to True\n",
            "  data = yf.download('^IRX', period = '1d')\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "<ipython-input-58-758964ec817d>:70: FutureWarning: YF.download() has changed argument auto_adjust default to True\n",
            "  data = yf.download('^IRX', period = '1d')\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "<ipython-input-58-758964ec817d>:70: FutureWarning: YF.download() has changed argument auto_adjust default to True\n",
            "  data = yf.download('^IRX', period = '1d')\n",
            "[*********************100%***********************]  1 of 1 completed\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "vega_values_calls_atm = dict(sorted(vega_values_calls_atm.items()))\n",
        "vega_values_puts_atm = dict(sorted(vega_values_puts_atm.items()))\n",
        "vega_values_calls_otm = dict(sorted(vega_values_calls_otm.items()))\n",
        "vega_values_puts_otm = dict(sorted(vega_values_puts_otm.items()))\n",
        "vega_values_calls_far_otm = dict(sorted(vega_values_calls_far_otm.items()))\n",
        "vega_values_puts_far_otm = dict(sorted(vega_values_puts_far_otm.items()))"
      ],
      "metadata": {
        "id": "bIQIk5cqXtvE"
      },
      "execution_count": 73,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10, 6))\n",
        "\n",
        "# Scatter plot for calls\n",
        "plt.scatter(vega_values_calls.keys(), vega_values_calls.values(), label='Calls', alpha=0.6, s=8)\n",
        "\n",
        "# Scatter plot for puts\n",
        "plt.scatter(vega_values_puts.keys(), vega_values_puts.values(), label='Puts', alpha=0.6, s=8)\n",
        "\n",
        "# plt.axvline(x=spy_historical_data.historical_price, color='r', linestyle='--', label='Spot Price')\n",
        "\n",
        "plt.xlabel('DTE')\n",
        "plt.ylabel('Vega')\n",
        "plt.title('Vega vs. DTE for Calls and Puts')\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "collapsed": true,
        "id": "6-7ZwJ3lEkNy",
        "outputId": "90572b3d-3fa2-4df7-9e74-8f440b4fb566"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "vega_values_calls_atm"
      ],
      "metadata": {
        "id": "8hYNXHh5iKYn",
        "outputId": "9748bf58-f43e-435e-d099-661415f766b5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{}"
            ]
          },
          "metadata": {},
          "execution_count": 71
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(12, 8))\n",
        "\n",
        "blue_atm = '#1f77b4'\n",
        "blue_otm = '#aec7e8'\n",
        "blue_far_otm = '#c6dbef'\n",
        "\n",
        "red_atm = '#d62728'\n",
        "red_otm = '#ff9896'\n",
        "red_far_otm = '#fdae6b'\n",
        "\n",
        "\n",
        "plt.plot(vega_values_calls_atm.keys(), vega_values_calls_atm.values(), label='ATM Calls', color=blue_atm)\n",
        "\n",
        "plt.plot(vega_values_calls_otm.keys(), vega_values_calls_otm.values(), label='OTM Calls', color=blue_otm)\n",
        "\n",
        "plt.plot(vega_values_calls_far_otm.keys(), vega_values_calls_far_otm.values(), label='Far OTM Calls',color=blue_far_otm)\n",
        "\n",
        "plt.plot(vega_values_puts_atm.keys(), vega_values_puts_atm.values(), label='ATM Puts', color=red_atm)\n",
        "\n",
        "plt.plot(vega_values_puts_otm.keys(), vega_values_puts_otm.values(), label='OTM Puts', color=red_otm)\n",
        "\n",
        "plt.plot(vega_values_puts_far_otm.keys(), vega_values_puts_far_otm.values(), label='Far OTM Puts', color=red_far_otm)\n",
        "\n",
        "\n",
        "plt.xlabel('Days to Expiry')\n",
        "plt.ylabel('Vega')\n",
        "plt.title('Vega vs. Days to Expiry for Different Option Types and Strikes')\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 718
        },
        "id": "eSan9kGiajQW",
        "outputId": "96bd00ee-4eca-4cab-ffd5-97db207ac9b1"
      },
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "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XHABJpOJ1atXN+j+1lTVn3Xr1rF7927PvavKtJaXl/Pwww973hNdu3blpZde4vjBcHX169tvv23QPQTQ6XQsWrSIHj16sHjxYoqLiz37as5pnzt3rmeEw+zZsz3DpKdPn86ll14KwNVXX41Go2H48OGec+zbt4+rrrqK0NBQzGYz/fv3rzXKpmpY9oYNG7j77ruJjIykTZs2nv2rV69m6NCh+Pn5ERAQwIQJE9i9e7fXOaZPn46/vz/p6elMnjwZf39/IiIieOSRR3A6nZ57HxERAcDTTz/tufcny4q+9dZbZGVl8eKLL3oF7OD+effee++h0Wj4xz/+Uet6Nm7cyJ133klYWBiBgYHcfPPNFBYWet3f3bt3s2HDBk9fqu7diea01+d9VZ970RhlZWX4+flx//3319qXlpaGTqfzjOSo7z2oUp/vcVZWFjNmzKBNmzaYTCaio6O54oorTpmFru/vhar3/8GDB5k+fTrBwcEEBQUxY8YMKioqvNparVYefPBBIiIiPL/T6jtq5tChQ+h0Ov7yl7/U2hcYGOgJuIcPH87XX3/N0aNHa01NqHo+PvnkE5588klat26Nr68vJSUl9a6HsHbtWnx9fbn++utxOBxA/d6vZ+p3oBDiBJQQQjSBtWvXKkC99tprXtvz8/OVwWBQN998s1JKqfLyctWrVy8VFhamnnjiCfXmm2+qm2++WWk0GnX//fd7jnM6nWrgwIFKp9Ope++9Vy1evFiNGjVK9e7dWwFq2bJlnrYvvfSSGjp0qPrHP/6h3n77bXX//fcrHx8fNWDAAOVyuU7a7xEjRqgePXrU2v70008rnU6nsrKylFJKPfHEE0qj0ajbb79dvfPOO+rll19W119/vfrnP//ZqPsFqHvuueeE+0eOHKm0Wq0qLi5WSimVm5uroqOj1UMPPaTeeOMNNX/+fNW1a1dlMBjU9u3bPcf97W9/UwaDQeXn53udb8WKFQpQGzduVEop9fbbbytAXXXVVeqtt95SCxcuVLfeequaNWvWCfuUlZWl/vGPfyhA3XHHHer9999X77//vjp06JBSSqlly5YpQF188cXq1VdfVY899pjy8fFRcXFxqrCw8KT3Y926dQpQ7777rsrNza31r+b3ceLEiSooKEilpKQopZRKTExURqNR3XrrrZ42R44cUYC68MILVVxcnJo3b556+umn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8803ueGGG4iMjOSZZ56pNRXmZG655Rav6zuVjz/+mGuvvZY777yTt956y1OoriHv1zP9O1AI4U2CdiFEk6kqNFc1LzotLY2ffvqJ6667zvNHeVJSEt9++y0RERFe/+Lj44Hq4lZHjx4lOjoaX19fr9fo1KlTrdctKCjg/vvvp1WrVvj4+BAREUH79u0BvObq1iU8PJyRI0eyYsUKz7ZPP/0UvV7PlVde6dn2j3/8g6KiIrp06cKFF17I7NmzSUxMbND9aYiq5X9qBg7vvfcevXr18swnjIiI4Ouvv651jTfffDObNm3i6NGjgPuDErvdzk033eRp83//93/4+/szYMAAOnfuzD333POnlrGqeq2uXbvW2tetWzfP/lO58MILiY+Pr/Xv+CJN1113HRMmTOD333/n9ttv93wodLzOnTvX2talS5d6VWWueoaOV5/72xBHjx4lJiamVpDYvXt3z/769Ksx6nrO/oyDBw+ilOLvf/97rff4U089BVCr7sXx11MVFIwYMaLWOdauXVvreLPZ7JmzXiUkJKTBQV5NAQEBp/wgo2r/8ffu+GfO39+f6OjoBlUCr9LQ99XpuBfg/sB02rRpfPXVV5553h9++CFms5mrr766VvtT3YP6fo9NJhPz5s1j9erVtGrVimHDhjF//nyysrJO2eeG/l5o27at19chISEAnnt39OhRtFptrRoHdX1vTiQ6Opo33niDzMxM9u/fz6JFi4iIiGDOnDksXbq03udpyM+AI0eOcOONNzJ16lRee+01rw8WG/J+PdO/A4UQ3qR6vBCiyfTr149u3brx8ccf88QTT/Dxxx+jlPKqGu9yuRg1ahSPPvponefo0qVLg1/3mmuu4ZdffmH27Nn06dMHf39/XC4XY8eOrVXcri7XXXcdM2bMYMeOHfTp04cVK1YwcuRIwsPDPW2GDRvGoUOH+O9//8vatWv517/+xauvvsqbb755Wpa72rVrFzqdzvPH2QcffMD06dOZPHkys2fPJjIy0lMA6tChQ7Wu58EHH+TDDz/kiSee4IMPPqB///5ef1x2796d/fv3s2rVKr799lu++OILlixZwpw5c+oszNfS5Ofns3XrVgD27NmDy+Vq8iWyTpTJqs/9PZ0akmE7laqifHV9GNYYVe+3Rx55hDFjxtTZ5vjXOv56qs7x/vvvExUVVev44yv918zSN5Xu3buzfft2rFZrrWr6VRITEzEYDHV+MNRcTse9qHLzzTfz4osv8tVXX3H99dfz0UcfMXHiRIKCghp8roZ8jx944AEmTZrEV199xZo1a/j73//OCy+8wI8//kjfvn1P+BoN/b1wonvXkAx4fWk0Grp06UKXLl2YMGECnTt35sMPP6z375KG/AyIjo4mOjqab775hq1bt9K/f3/Pvoa8X8/070AhhDcJ2oUQTWratGn8/e9/JzExkY8++ojOnTt7rbvdsWNHysrKPJn1E2nXrh3r1q2joqLCK9t+8OBBr3aFhYX88MMPPP3008yZM8ezvSFD+CZPnsydd97pGSJ/4MABHn/88VrtQkNDmTFjBjNmzKCsrIxhw4Yxd+7cJv+DJSUlhQ0bNjBw4EBPFu/zzz+nQ4cO/Oc///HKlFRlQ47v54QJE/jwww+ZNm0amzZtYsGCBbXa+fn5ce2113Lttddis9m48soree6553j88cdPuHTQiYZ/V1UY379/PyNGjPDat3///iZfY/2ee+6htLSUF154gccff5wFCxbUua59Xc/BgQMHPNWYG6O+97e+2rVrx/fff19rSPa+ffs8+08Hp9PJRx99hK+vL0OGDGmSc1YtHWYwGE75Hj+RqkxmZGRko89xvIZOW5g4cSKbN2/ms88+q3P4d3JyMj/99BPx8fG1AqikpCQuu+wyz9dlZWVkZmZ6Ld9Y3/6c6ffVyfTs2ZO+ffvy4Ycf0qZNG1JSUnjttdfqbHuqe9DQ73HHjh15+OGHefjhh0lKSqJPnz68/PLLfPDBB3W2b4rfC8dr164dLpeLQ4cOeX1At3///kafE9zvmZCQEDIzMz3bGjPN5kTMZjOrVq1ixIgRjB07lg0bNnDBBRd4Xhvq/349U78DhRC1yfB4IUSTqsqqz5kzhx07dtRam/2aa65h8+bNrFmzptaxRUVFniVoxowZg91u55133vHsd7lcvP76617HVGVHjs+GNCSICg4OZsyYMaxYsYJPPvkEo9HI5MmTvdocv0yQv78/nTp1wmq1erYVFxezb9++Uw7JP5mCggKuv/56nE4nf/vb3zzb67rO3377jc2bN9d5nptuuok9e/Ywe/ZsT72Bk12P0WikR48eKKWw2+0n7F/VGtpFRUVe2/v3709kZCRvvvmm1z1ZvXo1e/fuZcKECSe56ob5/PPP+fTTT/nnP//JY489xnXXXceTTz7JgQMHarX96quvvOZQ//777/z222+MGzfuT/XhVPe3IcaPH4/T6fQsL1jl1VdfRaPR/Om+1sXpdDJr1iz27t3LrFmz6qwH0BiRkZEMHz6ct956yysIqVK15vvJjBkzhsDAQJ5//vk6n8X6nON4VR/8Hf/cnsidd95JZGQks2fPrjUf3GKxMGPGDJRSXgFhlbffftur32+88QYOh8Pr++jn51evvpzJ91V93HTTTaxdu5YFCxYQFhZ2wmfzVPegvt/jiooKLBaL176OHTsSEBDgdT+O1xS/F45X1fdFixY16py//fYb5eXltbb//vvv5Ofne30Q4Ofn96d+jxwvKCiINWvWEBkZyahRozyjsxryfq3P70AhxOkjmXYhRJNq3749gwYN4r///S9AraB99uzZ/O9//2PixIlMnz6dfv36UV5ezs6dO/n8889JTk4mPDycyZMnM2DAAB5++GEOHjxIt27d+N///kdBQQFQnYkIDAz0zHO02+20bt2atWvXcuTIkQb1+9prr+XGG29kyZIljBkzhuDgYK/9PXr0YPjw4fTr14/Q0FC2bt3K559/zr333utp8+WXXzJjxgyWLVvmWef6ZA4cOMAHH3yAUoqSkhISEhL47LPPKCsr45VXXmHs2LGethMnTuQ///kPU6ZMYcKECRw5coQ333yTHj16eOYl1zRhwgTCwsL47LPPGDduHJGRkV77R48eTVRUFIMHD6ZVq1bs3buXxYsXM2HChJPOb+7YsSPBwcG8+eabBAQE4OfnxyWXXEL79u2ZN28eM2bM4NJLL+X6668nOzubhQsXEhcXx4MPPnjK+wHw008/1fojHaBXr1706tWLnJwc/vrXv3LZZZd57v3ixYtZt24d06dP5+eff/YaJt+pUyeGDBnCX//6V6xWqyfYONH0jPo61f1tiEmTJnHZZZfxt7/9jeTkZHr37s3atWv573//ywMPPFBrDm1DFRcXezKSFRUVHDx4kP/85z8cOnSI6667jmeeeeZPnf94r7/+OkOGDOHCCy/k9ttvp0OHDmRnZ7N582bS0tJISEg46fGBgYG88cYb3HTTTVx00UVcd911REREkJKSwtdff83gwYNrfcBxKj4+PvTo0YNPP/2ULl26EBoaSs+ePenZs2ed7cPCwvj888+ZMGECF110Ebfddhs9evQgKyuL5cuXc/DgQRYuXMigQYNqHWuz2Rg5ciTXXHMN+/fvZ8mSJQwZMoTLL7/c06Zfv3688cYbPPvss3Tq1InIyMhamXRwZ0Cb4n3VVG644QYeffRRvvzyS/761796FZur6VT3oL7f4wMHDnjO06NHD/R6PV9++SXZ2dkn/aCsqX4v1NSnTx+uv/56lixZQnFxMYMGDeKHH36oNfrrRN5//30+/PBDpkyZQr9+/TAajezdu5d3330Xs9nME0884Wnbr18/Pv30Ux566CEuvvhi/P39mTRpUqP7Du76Ld999x1DhgwhPj6en3/+mdatW9f7/Vqf34FCiNOoeYrWCyHOZa+//roC1IABA+rcX1paqh5//HHVqVMnZTQaVXh4uBo0aJB66aWXvJYJys3NVTfccIMKCAhQQUFBavr06WrTpk0KUJ988omnXVpampoyZYoKDg5WQUFB6uqrr1YZGRkNWuKppKRE+fj4KEB98MEHtfY/++yzasCAASo4OFj5+Piobt26qeeee86rv1XLHR2/HFpdqLGcmVarVcHBwapv377q/vvvr3M5L5fLpZ5//nnVrl07ZTKZVN++fdWqVavULbfcUufSQEopdffddytAffTRR7X2vfXWW2rYsGEqLCxMmUwm1bFjRzV79myvZdNO5L///a/q0aOH0uv1ta73008/VX379lUmk0mFhoaqadOmeS25diKnWvKt6vt45ZVXqoCAAJWcnFyrT4CaN2+eUsp7mbKXX35ZxcbGKpPJpIYOHVprfe4TLfl2siX5lDr5/T2REy3BVlpaqh588EEVExOjDAaD6ty5s3rxxRdrLSFXn34d/3o176O/v7/q3LmzuvHGGz1rgx/vzy75ppRShw4dUjfffLOKiopSBoNBtW7dWk2cOFF9/vnnnjZV75ctW7bU2Y9169apMWPGqKCgIGU2m1XHjh3V9OnT1datWz1tbrnlFuXn51fr2Lq+p7/88ovq16+fMhqN9f7ZcOTIEXX77bertm3bKoPBoMLDw9Xll1+ufvrpp1ptq65nw4YN6o477lAhISHK399fTZs2TeXn53u1zcrKUhMmTFABAQEK8CybVteyXUrV733VkHtxKscv+VbT+PHjFaB++eWXWvsacg+UOvX3OC8vT91zzz2qW7duys/PTwUFBalLLrlErVix4pTXUN/fC1X3Jzc3t85rqblmfGVlpZo1a5YKCwtTfn5+atKkSSo1NbVez1NiYqKaPXu2uuiii1RoaKjS6/UqOjpaXX311eqPP/7waltWVqZuuOEGFRwcrADPz/iTvefqs067UkodPHhQRUdHq+7du3uuuT7v1/r8DhRCnD4apU5DhQ0hhDhNvvrqK6ZMmcLPP//M4MGDm7s7LdqDDz7I0qVLycrKqlWF/1yXnJxM+/btefHFF3nkkUdOy2ucz/dX1LZ8+XJmzJjBli1bvIp9nWumTJnCzp0768wwny/3QAghzjSZ0y6EaLEqKyu9vnY6nbz22msEBgZy0UUXNVOvzg4Wi4UPPviAqVOnSkB5Gsj9FeejzMxMvv7660YvbyiEEKJxZE67EKLFuu+++6isrGTgwIFYrVb+85//8Msvv/D888836bJX55KcnBy+//57Pv/8c/Lz87n//vubu0vnFLm/4nx05MgRNm3axL/+9S8MBgN33nlnc3dJCCHOKxK0CyFarBEjRvDyyy+zatUqLBYLnTp14rXXXpPCNyexZ88epk2bRmRkJIsWLaJPnz7N3aVzitxfcT7asGEDM2bMoG3btrz33nt1rq0uhBDi9JE57UIIIYQQQgghRAslc9qFEEIIIYQQQogWSoJ2IYQQQgghhBCihZI57YDL5SIjI4OAgAA0Gk1zd0cIIYQQQgghxDlOKUVpaSkxMTFotSfOp0vQDmRkZBAbG9vc3RBCCCGEEEIIcZ5JTU2lTZs2J9wvQTsQEBAAuG9WYGBgvY+z2+2sXbuW0aNHYzAYTlf3xDlGnhvRGPLciMaQ50Y0hjw3ojHkuRGNcb4/NyUlJcTGxnri0RORoB08Q+IDAwMbHLT7+voSGBh4Xj5konHkuRGNIc+NaAx5bkRjyHMjGkOeG9EY8ty4nWqKthSiE0IIIYQQQgghWigJ2oUQQgghhBBCiBZKgnYhhBBCCCGEEKKFkjnt9eR0OrHb7V7b7HY7er0ei8WC0+lspp6Jlkqn06HX62UZQSGEEEIIIUSjSdBeD2VlZaSlpaGU8tqulCIqKorU1FQJzESdfH19iY6Oxmg0NndXhBBCCCGEEGchCdpPwel0kpaWhq+vLxEREV7BucvloqysDH9/f7RamWkgqimlsNls5ObmcuTIETp37izPiBBCCCGEEKLBmjVo37hxIy+++CLbtm0jMzOTL7/8ksmTJ9fZ9q677uKtt97i1Vdf5YEHHvBsLygo4L777mPlypVotVqmTp3KwoUL8ff3b5I+2u12lFJERETg4+Pjtc/lcmGz2TCbzRKQiVp8fHwwGAwcPXrU85wIIYQQQgghREM0a6RZXl5O7969ef3110/a7ssvv+TXX38lJiam1r5p06axe/duvvvuO1atWsXGjRu54447mryvMvxdNIZ8mCOEEEIIIYT4M5o10z5u3DjGjRt30jbp6encd999rFmzhgkTJnjt27t3L99++y1btmyhf//+ALz22muMHz+el156qc4gXwghhBBCCCGEOFu06DntLpeLm266idmzZ3PBBRfU2r9582aCg4M9ATtAfHw8Wq2W3377jSlTptR5XqvVitVq9XxdUlICuIfC11UhXimFy+XC5XJ57asqTFe1X4jjuVwulFLY7XZ0Oh2A5xk7/lkT4mTkuRGNIc+NaAx5bkRjyHMjGuN8f27qe90tOmifN28eer2eWbNm1bk/KyuLyMhIr216vZ7Q0FCysrJOeN4XXniBp59+utb2tWvX4uvrW+t8UVFRlJWVYbPZ6jxfaWnpqS5F/AkpKSn07t2bjRs3cuGFF/Lzzz8zadIkkpOTCQoKau7unZTNZqOyspKNGzficDi89n333XfN1CtxNpPnRjSGPDeiMeS5EY0hz41ojPP1uamoqKhXuxYbtG/bto2FCxfyxx9/NPl88scff5yHHnrI83VJSQmxsbGMHj2awMBAr7YWi4XU1FT8/f1rFRJTSlFaWkpAQECLnfO+efNmhg0bxpgxY1i1ahUAM2bM4N///vcJj2nXrh2HDx9mxIgRbNiwgeeff57/+7//82ozceJEVq9ezZw5c3jqqadOeC6bzcbChQv56KOPSEpKwtfXl65duzJz5kxuvPFGDAbDKa+hqqign58fgYGBng9WAgICan2/WhqLxYKPjw/Dhg3zPD92u53vvvuOUaNG1ev6hQB5bkTjyHMjGkOeG9EY8tyIxjjfn5uqEd+n0mKD9p9++omcnBzatm3r2eZ0Onn44YdZsGABycnJREVFkZOT43Wcw+GgoKCAqKioE57bZDJhMplqbTcYDLUeFqfTiUajQavV1ioqVjUkvmp/S7Rs2TLuu+8+li5dSlZWFjExMSxatIh58+Z52kRHR7Ns2TLGjh0LgE6n81xPbGws7733Ho8//rinfXp6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5Q5kl3oC9bIUd0b90fQddClKq26k0+E3cCCB48YRED8SXVDQCftTaXO6K8CX2nDUyKoH+ehpFWQkxM9wbK76WeZUgXpce+jYEWJaSzG5ZqCUgtJsyNrpDtQLjgA1EoPmIIi+EE3UhRDRBY3uLPmA6E9q1qC9rKyMgwcPer4+cuQIO3bsIDQ0lOjoaK666ir++OMPVq1ahdPp9MxTDw0NxWg00r17d8aOHcvtt9/Om2++id1u59577+W66647fZXjlYKquckul/v/dnt14YnTSa93L65ZD/fccw9Go5G1a9fi4+MDQNu2benbty8dO3bkb3/7G2+88YbXiAR/f3/PHP663HLLLbz77rueoL2yspJPPvmEWbNm8cwzz5yyTwEBAURFRREVFcXrr7/OBx98wMqVKxk0aBAajYYvv/ySyZMne9oHBwezYMECpk+f7hkR0LdvXwAuvfRS1q9fz/r163n00UfZvXs3BoOBCy64gI8++oh27drV6z4JIYQQQjSn0koHaXkWUvMslFurq66bDFrahJmIDfch2E9f51TMI3nlrErIYGViBvnJ6QxNT+C+9AS6F9aY0a7V4nvJAHegPmoU+pCQE/bFdawSfXaJjZLjsuqRge6sutlwFgayEqi3aBrlgryDuHL3QNYuKM/1bhDUpjpQD449L6clN2vQvnXrVi677DLP11XzzG+55Rbmzp3L//73P4Baw6HXrVvH8OHDAfjwww+59957GTlyJFqtlqlTp7Jo0aLT12mHA979FwBaIPj0vVJtM2+DegyhKCgoYM2aNTz33HOegL1KVFQU06ZN49NPP2XJkiUNeuhvuukmXnzxRc+Se1988QVxcXFcdNFFDb4UvV6PwWA4YXG/4/3+++8MGDCA77//ngsuuACj0YjD4WDy5MncfvvtfPzxx9hsNn7//ffz8o0shBBCiLOHxeau/J6aV0lheXVwrNNCTKh7ibaIIGOdmey0wgpWJWayKjGD9ENpDMlI5Pb0BHrmH6lupNHg278/gePHETB6NPrjRqser9LmJLvERm6JDUeNxd2DffW0CjQRcoIPDVo0lwuyMuHQSQL1Dh2htQTqzUHZKyF7D5qMREarBHS//lC9U6t3Z9GjekLUhWh8T/xB0/miWYP24cOHn3Qe9Mn2VQkNDeWjjz5qym6d9ZKSklBK0b179zr3d+/encLCQnJz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icQYw/XXX89TTz3F0qVLGTp0aKfnp02bhtvt7jSOysvL2bNnj8ZRP3buueeyfv161q1b1/E1ffp0Lr/88o7HGjfyYaeffvoRW0pu2bKFsrIyAIYOHUpRUVGncdPU1MRbb72lcdOPtba24nB0/jXQ6XRi2zagcSPH15UxMnv2bBoaGli9enXHOUuXLsW2bWbOnNnjfZbEcDiwb926lVdeeYW8vLxOz2vcHEVvr4SXjP76178ar9drHnzwQbNx40bzta99zWRnZ5uqqqre7pokiK9//esmKyvLLF++3FRWVnZ8tba2dpxz3XXXmcGDB5ulS5eat99+28yePdvMnj27F3stieiDq8cbo3EjR1q5cqVxuVzmZz/7mdm6dat59NFHTWpqqvnzn//ccc6dd95psrOzzdNPP23effdd8+lPf9oMHTrUtLW19WLPpTfNnz/flJaWmmeffdbs3LnTPPnkk2bAgAHm29/+dsc5GjfS3Nxs1q5da9auXWsAc/fdd5u1a9d2rPLdlTFy/vnnmylTppi33nrLvP7662bkyJHmS1/6Um+9JekBHzVugsGg+dSnPmUGDhxo1q1b1+n35EAg0HENjZvOFNq76Te/+Y0ZPHiw8Xg85tRTTzUrVqzo7S5JAgGO+rVo0aKOc9ra2sw3vvENk5OTY1JTU81nP/tZU1lZ2XudloT04dCucSNH88wzz5gJEyYYr9drxowZY373u991et62bfODH/zAFBYWGq/Xa84991xTXl7eS72VRNDU1GRuvPFGM3jwYOPz+cywYcPM//zP/3T6pVnjRpYtW3bU32fmz59vjOnaGDl48KD50pe+ZNLT001mZqa58sorTXNzcy+8G+kpHzVudu7ceczfk5ctW9ZxDY2bzixjjOm5+/oiIiIiIiIi0lWa0y4iIiIiIiKSoBTaRURERERERBKUQruIiIiIiIhIglJoFxEREREREUlQCu0iIiIiIiIiCUqhXURERERERCRBKbSLiIiIiIiIJCiFdhEREREREZEEpdAuIiIiSe/BBx8kOzu7t7shIiIScwrtIiIiveSKK67Asiwsy8LtdlNYWMjcuXP505/+hG3bvd63z3zmMyd9nV27dnW8xw9/rVix4uQ7esgXvvAFtmzZErPriYiIJApXb3dARESkPzv//PNZtGgRkUiE6upqXnzxRW688Ub+/ve/869//QuXq2/8r/qVV15h/PjxnY7l5eXF7PopKSmkpKQc8/lgMIjH44lZeyIiIj1Fd9pFRER6kdfrpaioiNLSUqZOncr3v/99nn76aV544QUefPDBjvPuvvtuJk6cSFpaGoMGDeIb3/gGLS0tAPj9fjIzM/n73//e6dr//Oc/SUtLo7m5mWAwyPXXX09xcTE+n4+ysjLuuOOOo/bptttu46GHHuLpp5/uuCu+fPlyANavX88555xDSkoKeXl5fO1rX+vox0fJy8ujqKio05fb7cYYw5w5c5g3bx7GGADq6uoYOHAgP/zhDwFYvnw5lmXx3HPPMWnSJHw+H7NmzWLDhg0d1/9wefxtt93GKaecwh/+8AeGDh2Kz+fj4YcfJi8vj0Ag0Klvn/nMZ/jyl7983PcgIiLSGxTaRUREEsw555zD5MmTefLJJzuOORwO7rnnHt577z0eeughli5dyre//W0A0tLS+OIXv8iiRYs6XWfRokV87nOfIyMjg3vuuYd//etf/O1vf6O8vJxHH32UIUOGHLX9b33rW1x66aWcf/75VFZWUllZyWmnnYbf72fevHnk5OSwatUqnnjiCV555RWuv/76br9Xy7J46KGHWLVqFffccw8A1113HaWlpR2h/bBbb72VX/3qV6xatYr8/HwuuugiQqHQMa+9bds2/vGPf/Dkk0+ybt06Pv/5zxOJRPjXv/7VcU5NTQ3PPfccV111Vbffg4iISDz1jZo7ERGRPmbMmDG8++67Hd/fdNNNHY+HDBnCT3/6U6677jruu+8+AL761a9y2mmnUVlZSXFxMTU1NTz//PO88sorAOzZs4eRI0dyxhlnYFkWZWVlx2w7PT2dlJQUAoEARUVFHccfeugh2tvbefjhh0lLSwPg3nvv5aKLLuKuu+6isLDwmNc87bTTcDg63ys4fIe+tLSU3/72t3zlK1+hqqqK559/nrVr1x4xNeBHP/oRc+fO7ejLwIEDeeqpp7j00kuP2mYwGOThhx8mPz+/49hll13GokWL+PznPw/An//8ZwYPHsxZZ511zL6LiIj0Jt1pFxERSUDGGCzL6vj+lVde4dxzz6W0tJSMjAy+/OUvc/DgQVpbWwE49dRTGT9+PA899BAQDaNlZWWceeaZQHRhuXXr1jF69Gi++c1v8vLLL59wnzZt2sTkyZM7AjvA6aefjm3blJeXf+RrH3/8cdatW9fp64M+//nP89nPfpY777yT//3f/2XkyJFHXGP27Nkdj3Nzcxk9ejSbNm06ZptlZWWdAjvANddcw8svv8z+/fuBaFn94QUBRUREEpFCu4iISALatGkTQ4cOBaIrsF944YVMmjSJf/zjH6xevZqFCxcC0bvJh331q1/tmAe/aNEirrzyyo4wOnXqVHbu3MlPfvIT2trauPTSS/nc5z7XY+9n0KBBjBgxotPXB7W2trJ69WqcTidbt26NSZsf/HDhsClTpjB58mQefvhhVq9ezXvvvccVV1wRk/ZERETiQaFdREQkwSxdupT169dzySWXALB69Wps2+ZXv/oVs2bNYtSoUVRUVBzxuv/6r/9i9+7d3HPPPWzcuJH58+d3ej4zM5MvfOEL/P73v+fxxx/nH//4B3V1dUftg8fjIRKJdDo2duxY3nnnHfx+f8ex//znPzgcDkaPHn1S7/m///u/cTgcvPDCC9xzzz0sXbr0iHM+uEVcfX09W7ZsYezYsSfc1uEPNxYtWsScOXMYNGjQSfVdREQknhTaRUREelEgEKCqqor9+/ezZs0afv7zn/PpT3+aCy+8kK985SsAjBgxglAoxG9+8xt27NjBI488wgMPPHDEtXJycrj44ou59dZbOe+88xg4cGDHc3fffTd/+ctf2Lx5M1u2bOGJJ56gqKio04rrHzRkyBDeffddysvLqa2tJRQKcfnll+Pz+Zg/fz4bNmxg2bJl3HDDDXz5y1/+yPnsAAcPHqSqqqrTV3t7OwDPPfccf/rTn3j00UeZO3cut956K/Pnz6e+vr7TNX784x+zZMkSNmzYwBVXXMGAAQO6tZf8ZZddxr59+/j973+vBehERCThKbSLiIj0ohdffJHi4mKGDBnC+eefz7Jly7jnnnt4+umncTqdAEyePJm7776bu+66iwkTJvDoo48ec7u2q6++mmAweEQYzcjI4Be/+AXTp09nxowZ7Nq1i+eff/6IxeEOu+aaaxg9ejTTp08nPz+f//znP6SmpvLSSy9RV1fHjBkz+NznPse5557Lvffee9z3OWfOHIqLizt9/fOf/+TAgQNcffXV3HbbbUydOhWA22+/ncLCQq677rpO17jzzju58cYbmTZtGlVVVTzzzDPd2ns9KyuLSy65hPT09G6FfhERkZ5kmcObooqIiEjSe+SRR7j55pupqKjoVqBNRMuXL+fss8+mvr7+mJUBJ+rcc89l/PjxHdvMiYiIJCpt+SYiItIHtLa2UllZyZ133sm1117bZwJ7rNXX17N8+XKWL1/esV2eiIhIIlN5vIiISB/wi1/8gjFjxlBUVMT3vve93u5OwpoyZQpXXHEFd91110kvniciItITVB4vIiIiIiIikqB0p11EREREREQkQSm0i4iIiIiIiCQohXYRERERERGRBKXQLiIiIiIiIpKgFNpFREREREREEpRCu4iIiIiIiEiCUmgXERERERERSVAK7SIiIiIiIiIJ6v8HkxrxmiwzIzYAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "spy_front_month = spy_historical_data.historical_raw_data[spy_historical_data.expiration_date_index_map['2025-06-30']]\n",
        "spy_back_month = spy_historical_data.historical_raw_data[spy_historical_data.expiration_date_index_map['2025-08-29']]"
      ],
      "metadata": {
        "id": "mU93bAvPSVb4"
      },
      "execution_count": 56,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Miscellaneous"
      ],
      "metadata": {
        "id": "P0ZojTzQ_cfE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# def get_earnings_moves(mode, symbol, interval = 5):\n",
        "#   loading_stat(symbol, assets_list)\n",
        "#   url = 'https://www.marketbeat.com/stocks/' + valid_url(symbol) + '/' + symbol + '/earnings/'\n",
        "#   r = requests.get(url)\n",
        "#   soup=bs4.BeautifulSoup(r.text, \"lxml\")\n",
        "#   try:\n",
        "#     data = soup.find_all(\"table\", {'id':'earnings-history'})[0]\n",
        "#     data = data.find_all('tr')\n",
        "#     if mode == 'earnings_data':\n",
        "#       earnings_dates = []\n",
        "#       for x in range(2,8):\n",
        "#         earnings_dates.append(data[x].find_all('td')[0].text)\n",
        "#       before_earnings_moves = []\n",
        "#       after_earnings_moves = []\n",
        "#       for date in earnings_dates:\n",
        "#         example_date = datetime_obj.strptime(date, '%m/%d/%Y').strftime('%Y-%m-%d')\n",
        "#         date_format = '%Y-%m-%d'\n",
        "#         date_obj  = datetime_obj.strptime(example_date, date_format)\n",
        "#         date_obj_prev = date_obj - datetime.timedelta(interval)\n",
        "#         date_obj_prev_str = str(date_obj_prev.year) + '-' + str(date_obj_prev.month) + '-' + str(date_obj_prev.day)\n",
        "#         prices = pdr.get_data_yahoo(symbol, date_obj_prev_str).Close\n",
        "#         before_earnings_moves.append(max_move(prices.iloc[:interval]))\n",
        "#         after_earnings_moves.append(max_move(prices.iloc[interval : interval + 5]))\n",
        "#         result = before_earnings_moves, after_earnings_moves\n",
        "#     elif mode == 'earnings_eta':\n",
        "#       next_earnings = data[1].find_all('td')[0].text[:-10].replace(' ','')\n",
        "#       today = datetime.date.today()\n",
        "#       today_with_time = datetime_obj(\n",
        "#           year=today.year,\n",
        "#           month=today.month,\n",
        "#           day=today.day,\n",
        "#       )\n",
        "#       date_format = \"%m/%d/%Y\"\n",
        "#       next_earnings_1 = datetime_obj.strptime(next_earnings, date_format)\n",
        "#       diff = next_earnings_1 - today_with_time\n",
        "#       result = diff.days\n",
        "#   except:\n",
        "#     result = 'na'\n",
        "#   return result\n",
        "\n",
        "# import matplotlib.pyplot as plt\n",
        "\n",
        "# # Extract data for the first plot (strike vs delta)\n",
        "# strikes_put = [item['strike'] for item in nvda_data_8_3_40dte['put']]\n",
        "# deltas_put = [item['delta'] for item in nvda_data_8_3_40dte['put']]\n",
        "# strikes_call = [item['strike'] for item in nvda_data_8_3_40dte['call']]\n",
        "# deltas_call = [item['delta'] for item in nvda_data_8_3_40dte['call']]\n",
        "\n",
        "# # Create the first scatter plot\n",
        "# plt.figure(figsize=(8, 6))\n",
        "# plt.scatter(strikes_put, deltas_put, color='red', label='Put Options') #Color Put options red\n",
        "# plt.scatter(strikes_call, deltas_call, color='blue', label='Call Options') #Color Call options blue\n",
        "# plt.xlabel('Strike Price')\n",
        "# plt.ylabel('Delta')\n",
        "# plt.title('Strike Price vs. Delta for NVDA Options')\n",
        "# plt.grid(True)\n",
        "# plt.legend()\n",
        "# plt.show()\n",
        "\n",
        "# prices_put = [item['price'] for item in nvda_data_8_3_40dte['put']]\n",
        "# prices_call = [item['price'] for item in nvda_data_8_3_40dte['call']]\n",
        "\n",
        "# # Create the second scatter plot\n",
        "# plt.figure(figsize=(8, 6))\n",
        "# plt.scatter(strikes_put, prices_put, color='red', label='Put Options') #Color Put options red\n",
        "# plt.scatter(strikes_call, prices_call, color='blue', label='Call Options') #Color Call options blue\n",
        "# plt.xlabel('Strike Price')\n",
        "# plt.ylabel('Price')\n",
        "# plt.title('Strike Price vs. Price for NVDA Options')\n",
        "# plt.grid(True)\n",
        "# plt.legend() # Add a legend to differentiate the colors\n",
        "# plt.show()\n"
      ],
      "metadata": {
        "collapsed": true,
        "id": "xC4b7lg1TOjd"
      },
      "execution_count": 57,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}